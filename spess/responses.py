# !!! THIS FILE IS GENERATED BY generate.py
# !!! DO NOT EDIT THIS FILE DIRECTLY

from __future__ import annotations

import dataclasses
import typing

from spess.json import Json, from_json, to_json, Enum, datetime
import spess.models as models

__all__ = [
    'Status', 'ErrorCodes', 'SupplyConstruction', 'AcceptContract',
    'FulfillContract', 'DeliverContract', 'MyFaction', 'PurchaseShip',
    'MyAccount', 'CreateChart', 'NegotiateContract', 'DockShip',
    'ExtractResources', 'ExtractResourcesWithSurvey', 'Jettison',
    'JumpShip', 'CreateShipSystemScan', 'CreateShipWaypointScan',
    'CreateShipShipScan', 'ScrapShip', 'GetScrapShip', 'NavigateShip',
    'WarpShip', 'OrbitShip', 'PurchaseCargo', 'Produce', 'ShipRefine',
    'RefuelShip', 'RepairShip', 'GetRepairShip', 'SellCargo',
    'SiphonResources', 'CreateSurvey', 'TransferCargo',
    'InstallShipModule', 'RemoveShipModule', 'InstallMount',
    'RemoveMount', 'PatchShipNav', 'Register',
]

@dataclasses.dataclass
class Status:
    """Fetched status successfully."""

    @dataclasses.dataclass
    class Stats:
        # Number of registered agents in the game.
        agents: int
        # Total number of ships in the game.
        ships: int
        # Total number of systems in the game.
        systems: int
        # Total number of waypoints in the game.
        waypoints: int
        # Total number of accounts registered on the game server.
        accounts: int | None = None

        def to_json(self) -> Json:
            v = {
                'agents': to_json(self.agents),
                'ships': to_json(self.ships),
                'systems': to_json(self.systems),
                'waypoints': to_json(self.waypoints),
            }
            if self.accounts is not None:
                v['accounts'] = to_json(self.accounts)
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                agents = from_json(int, v['agents']),
                ships = from_json(int, v['ships']),
                systems = from_json(int, v['systems']),
                waypoints = from_json(int, v['waypoints']),
                accounts = from_json(int, v['accounts']) if 'accounts' in v else None,
            )

    @dataclasses.dataclass
    class Health:
        # The date/time when the market was last updated.
        last_market_update: str | None = None

        def to_json(self) -> Json:
            v = {
            }
            if self.last_market_update is not None:
                v['lastMarketUpdate'] = to_json(self.last_market_update)
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                last_market_update = from_json(str, v['lastMarketUpdate']) if 'lastMarketUpdate' in v else None,
            )

    @dataclasses.dataclass
    class Leaderboards:

        @dataclasses.dataclass
        class MostCredit:
            # Symbol of the agent.
            agent_symbol: str
            # Amount of credits.
            credits: int

            def to_json(self) -> Json:
                v = {
                    'agentSymbol': to_json(self.agent_symbol),
                    'credits': to_json(self.credits),
                }
                return v

            @classmethod
            def from_json(cls, v: Json) -> typing.Self:
                if not isinstance(v, dict):
                    raise TypeError(type(v))
                return cls(
                    agent_symbol = from_json(str, v['agentSymbol']),
                    credits = from_json(int, v['credits']),
                )

        @dataclasses.dataclass
        class MostSubmittedChart:
            # Symbol of the agent.
            agent_symbol: str
            # Amount of charts done by the agent.
            chart_count: int

            def to_json(self) -> Json:
                v = {
                    'agentSymbol': to_json(self.agent_symbol),
                    'chartCount': to_json(self.chart_count),
                }
                return v

            @classmethod
            def from_json(cls, v: Json) -> typing.Self:
                if not isinstance(v, dict):
                    raise TypeError(type(v))
                return cls(
                    agent_symbol = from_json(str, v['agentSymbol']),
                    chart_count = from_json(int, v['chartCount']),
                )
        # Top agents with the most credits.
        most_credits: list[Status.Leaderboards.MostCredit]
        # Top agents with the most charted submitted.
        most_submitted_charts: list[Status.Leaderboards.MostSubmittedChart]

        def to_json(self) -> Json:
            v = {
                'mostCredits': to_json(self.most_credits),
                'mostSubmittedCharts': to_json(self.most_submitted_charts),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                most_credits = from_json(list[Status.Leaderboards.MostCredit], v['mostCredits']),
                most_submitted_charts = from_json(list[Status.Leaderboards.MostSubmittedChart], v['mostSubmittedCharts']),
            )

    @dataclasses.dataclass
    class ServerResets:
        # The date and time when the game server will reset.
        next: str
        # How often we intend to reset the game server.
        frequency: str

        def to_json(self) -> Json:
            v = {
                'next': to_json(self.next),
                'frequency': to_json(self.frequency),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                next = from_json(str, v['next']),
                frequency = from_json(str, v['frequency']),
            )

    @dataclasses.dataclass
    class Announcement:
        title: str
        body: str

        def to_json(self) -> Json:
            v = {
                'title': to_json(self.title),
                'body': to_json(self.body),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                title = from_json(str, v['title']),
                body = from_json(str, v['body']),
            )

    @dataclasses.dataclass
    class Link:
        name: str
        url: str

        def to_json(self) -> Json:
            v = {
                'name': to_json(self.name),
                'url': to_json(self.url),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                name = from_json(str, v['name']),
                url = from_json(str, v['url']),
            )
    # The current status of the game server.
    status: str
    # The current version of the API.
    version: str
    # The date when the game server was last reset.
    reset_date: str
    description: str
    stats: Status.Stats
    health: Status.Health
    leaderboards: Status.Leaderboards
    server_resets: Status.ServerResets
    announcements: list[Status.Announcement]
    links: list[Status.Link]

    def to_json(self) -> Json:
        v = {
            'status': to_json(self.status),
            'version': to_json(self.version),
            'resetDate': to_json(self.reset_date),
            'description': to_json(self.description),
            'stats': to_json(self.stats),
            'health': to_json(self.health),
            'leaderboards': to_json(self.leaderboards),
            'serverResets': to_json(self.server_resets),
            'announcements': to_json(self.announcements),
            'links': to_json(self.links),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            status = from_json(str, v['status']),
            version = from_json(str, v['version']),
            reset_date = from_json(str, v['resetDate']),
            description = from_json(str, v['description']),
            stats = from_json(Status.Stats, v['stats']),
            health = from_json(Status.Health, v['health']),
            leaderboards = from_json(Status.Leaderboards, v['leaderboards']),
            server_resets = from_json(Status.ServerResets, v['serverResets']),
            announcements = from_json(list[Status.Announcement], v['announcements']),
            links = from_json(list[Status.Link], v['links']),
        )

@dataclasses.dataclass
class ErrorCodes:
    """Fetched error codes successfully."""

    @dataclasses.dataclass
    class ErrorCode:
        code: float
        name: str

        def to_json(self) -> Json:
            v = {
                'code': to_json(self.code),
                'name': to_json(self.name),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                code = from_json(float, v['code']),
                name = from_json(str, v['name']),
            )
    error_codes: list[ErrorCodes.ErrorCode]

    def to_json(self) -> Json:
        v = {
            'errorCodes': to_json(self.error_codes),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            error_codes = from_json(list[ErrorCodes.ErrorCode], v['errorCodes']),
        )

@dataclasses.dataclass
class SupplyConstruction:
    # The construction details of a waypoint.
    construction: models.Construction
    # Ship cargo details.
    cargo: models.ShipCargo

    def to_json(self) -> Json:
        v = {
            'construction': to_json(self.construction),
            'cargo': to_json(self.cargo),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            construction = from_json(models.Construction, v['construction']),
            cargo = from_json(models.ShipCargo, v['cargo']),
        )

@dataclasses.dataclass
class AcceptContract:
    # Contract details.
    contract: models.Contract
    # Agent details.
    agent: models.Agent

    def to_json(self) -> Json:
        v = {
            'contract': to_json(self.contract),
            'agent': to_json(self.agent),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            contract = from_json(models.Contract, v['contract']),
            agent = from_json(models.Agent, v['agent']),
        )

@dataclasses.dataclass
class FulfillContract:
    # Contract details.
    contract: models.Contract
    # Agent details.
    agent: models.Agent

    def to_json(self) -> Json:
        v = {
            'contract': to_json(self.contract),
            'agent': to_json(self.agent),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            contract = from_json(models.Contract, v['contract']),
            agent = from_json(models.Agent, v['agent']),
        )

@dataclasses.dataclass
class DeliverContract:
    # Contract details.
    contract: models.Contract
    # Ship cargo details.
    cargo: models.ShipCargo

    def to_json(self) -> Json:
        v = {
            'contract': to_json(self.contract),
            'cargo': to_json(self.cargo),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            contract = from_json(models.Contract, v['contract']),
            cargo = from_json(models.ShipCargo, v['cargo']),
        )

@dataclasses.dataclass
class MyFaction:
    symbol: str
    reputation: int

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'reputation': to_json(self.reputation),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            reputation = from_json(int, v['reputation']),
        )

@dataclasses.dataclass
class PurchaseShip:
    # Ship details.
    ship: models.Ship
    # Agent details.
    agent: models.Agent
    # Results of a transaction with a shipyard.
    transaction: models.ShipyardTransaction

    def to_json(self) -> Json:
        v = {
            'ship': to_json(self.ship),
            'agent': to_json(self.agent),
            'transaction': to_json(self.transaction),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            ship = from_json(models.Ship, v['ship']),
            agent = from_json(models.Agent, v['agent']),
            transaction = from_json(models.ShipyardTransaction, v['transaction']),
        )

@dataclasses.dataclass
class MyAccount:

    @dataclasses.dataclass
    class Account:
        id: str
        email: str
        created_at: datetime
        token: str | None = None

        def to_json(self) -> Json:
            v = {
                'id': to_json(self.id),
                'email': to_json(self.email),
                'createdAt': to_json(self.created_at),
            }
            if self.token is not None:
                v['token'] = to_json(self.token)
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                id = from_json(str, v['id']),
                email = from_json(str, v['email']),
                created_at = from_json(datetime, v['createdAt']),
                token = from_json(str, v['token']) if 'token' in v else None,
            )
    account: MyAccount.Account

    def to_json(self) -> Json:
        v = {
            'account': to_json(self.account),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            account = from_json(MyAccount.Account, v['account']),
        )

@dataclasses.dataclass
class CreateChart:
    # The chart of a system or waypoint, which makes the location
    # visible to other agents.
    chart: models.Chart
    # A waypoint is a location that ships can travel to such as a
    # Planet, Moon or Space Station.
    waypoint: models.Waypoint
    # Result of a chart transaction.
    transaction: models.ChartTransaction
    # Agent details.
    agent: models.Agent

    def to_json(self) -> Json:
        v = {
            'chart': to_json(self.chart),
            'waypoint': to_json(self.waypoint),
            'transaction': to_json(self.transaction),
            'agent': to_json(self.agent),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            chart = from_json(models.Chart, v['chart']),
            waypoint = from_json(models.Waypoint, v['waypoint']),
            transaction = from_json(models.ChartTransaction, v['transaction']),
            agent = from_json(models.Agent, v['agent']),
        )

@dataclasses.dataclass
class NegotiateContract:
    # Contract details.
    contract: models.Contract

    def to_json(self) -> Json:
        v = {
            'contract': to_json(self.contract),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            contract = from_json(models.Contract, v['contract']),
        )

@dataclasses.dataclass
class DockShip:
    # The navigation information of the ship.
    nav: models.ShipNav

    def to_json(self) -> Json:
        v = {
            'nav': to_json(self.nav),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            nav = from_json(models.ShipNav, v['nav']),
        )

@dataclasses.dataclass
class ExtractResources:
    # Extraction details.
    extraction: models.Extraction
    # A cooldown is a period of time in which a ship cannot perform
    # certain actions.
    cooldown: models.Cooldown
    # Ship cargo details.
    cargo: models.ShipCargo
    events: list[models.ShipConditionEvent]
    modifiers: list[models.WaypointModifier] | None = None

    def to_json(self) -> Json:
        v = {
            'extraction': to_json(self.extraction),
            'cooldown': to_json(self.cooldown),
            'cargo': to_json(self.cargo),
            'events': to_json(self.events),
        }
        if self.modifiers is not None:
            v['modifiers'] = to_json(self.modifiers)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            extraction = from_json(models.Extraction, v['extraction']),
            cooldown = from_json(models.Cooldown, v['cooldown']),
            cargo = from_json(models.ShipCargo, v['cargo']),
            events = from_json(list[models.ShipConditionEvent], v['events']),
            modifiers = from_json(list[models.WaypointModifier], v['modifiers']) if 'modifiers' in v else None,
        )

@dataclasses.dataclass
class ExtractResourcesWithSurvey:
    # Extraction details.
    extraction: models.Extraction
    # A cooldown is a period of time in which a ship cannot perform
    # certain actions.
    cooldown: models.Cooldown
    # Ship cargo details.
    cargo: models.ShipCargo
    events: list[models.ShipConditionEvent]
    modifiers: list[models.WaypointModifier] | None = None

    def to_json(self) -> Json:
        v = {
            'extraction': to_json(self.extraction),
            'cooldown': to_json(self.cooldown),
            'cargo': to_json(self.cargo),
            'events': to_json(self.events),
        }
        if self.modifiers is not None:
            v['modifiers'] = to_json(self.modifiers)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            extraction = from_json(models.Extraction, v['extraction']),
            cooldown = from_json(models.Cooldown, v['cooldown']),
            cargo = from_json(models.ShipCargo, v['cargo']),
            events = from_json(list[models.ShipConditionEvent], v['events']),
            modifiers = from_json(list[models.WaypointModifier], v['modifiers']) if 'modifiers' in v else None,
        )

@dataclasses.dataclass
class Jettison:
    # Ship cargo details.
    cargo: models.ShipCargo

    def to_json(self) -> Json:
        v = {
            'cargo': to_json(self.cargo),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            cargo = from_json(models.ShipCargo, v['cargo']),
        )

@dataclasses.dataclass
class JumpShip:
    # The navigation information of the ship.
    nav: models.ShipNav
    # A cooldown is a period of time in which a ship cannot perform
    # certain actions.
    cooldown: models.Cooldown
    # Result of a transaction with a market.
    transaction: models.MarketTransaction
    # Agent details.
    agent: models.Agent

    def to_json(self) -> Json:
        v = {
            'nav': to_json(self.nav),
            'cooldown': to_json(self.cooldown),
            'transaction': to_json(self.transaction),
            'agent': to_json(self.agent),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            nav = from_json(models.ShipNav, v['nav']),
            cooldown = from_json(models.Cooldown, v['cooldown']),
            transaction = from_json(models.MarketTransaction, v['transaction']),
            agent = from_json(models.Agent, v['agent']),
        )

@dataclasses.dataclass
class CreateShipSystemScan:
    # A cooldown is a period of time in which a ship cannot perform
    # certain actions.
    cooldown: models.Cooldown
    # List of scanned systems.
    systems: list[models.ScannedSystem]

    def to_json(self) -> Json:
        v = {
            'cooldown': to_json(self.cooldown),
            'systems': to_json(self.systems),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            cooldown = from_json(models.Cooldown, v['cooldown']),
            systems = from_json(list[models.ScannedSystem], v['systems']),
        )

@dataclasses.dataclass
class CreateShipWaypointScan:
    # A cooldown is a period of time in which a ship cannot perform
    # certain actions.
    cooldown: models.Cooldown
    # List of scanned waypoints.
    waypoints: list[models.ScannedWaypoint]

    def to_json(self) -> Json:
        v = {
            'cooldown': to_json(self.cooldown),
            'waypoints': to_json(self.waypoints),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            cooldown = from_json(models.Cooldown, v['cooldown']),
            waypoints = from_json(list[models.ScannedWaypoint], v['waypoints']),
        )

@dataclasses.dataclass
class CreateShipShipScan:
    # A cooldown is a period of time in which a ship cannot perform
    # certain actions.
    cooldown: models.Cooldown
    # List of scanned ships.
    ships: list[models.ScannedShip]

    def to_json(self) -> Json:
        v = {
            'cooldown': to_json(self.cooldown),
            'ships': to_json(self.ships),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            cooldown = from_json(models.Cooldown, v['cooldown']),
            ships = from_json(list[models.ScannedShip], v['ships']),
        )

@dataclasses.dataclass
class ScrapShip:
    # Agent details.
    agent: models.Agent
    # Result of a scrap transaction.
    transaction: models.ScrapTransaction

    def to_json(self) -> Json:
        v = {
            'agent': to_json(self.agent),
            'transaction': to_json(self.transaction),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            agent = from_json(models.Agent, v['agent']),
            transaction = from_json(models.ScrapTransaction, v['transaction']),
        )

@dataclasses.dataclass
class GetScrapShip:
    # Result of a scrap transaction.
    transaction: models.ScrapTransaction

    def to_json(self) -> Json:
        v = {
            'transaction': to_json(self.transaction),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            transaction = from_json(models.ScrapTransaction, v['transaction']),
        )

@dataclasses.dataclass
class NavigateShip:
    # The navigation information of the ship.
    nav: models.ShipNav
    # Details of the ship's fuel tanks including how much fuel was
    # consumed during the last transit or action.
    fuel: models.ShipFuel
    events: list[models.ShipConditionEvent]

    def to_json(self) -> Json:
        v = {
            'nav': to_json(self.nav),
            'fuel': to_json(self.fuel),
            'events': to_json(self.events),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            nav = from_json(models.ShipNav, v['nav']),
            fuel = from_json(models.ShipFuel, v['fuel']),
            events = from_json(list[models.ShipConditionEvent], v['events']),
        )

@dataclasses.dataclass
class WarpShip:
    # The navigation information of the ship.
    nav: models.ShipNav
    # Details of the ship's fuel tanks including how much fuel was
    # consumed during the last transit or action.
    fuel: models.ShipFuel
    events: list[models.ShipConditionEvent]

    def to_json(self) -> Json:
        v = {
            'nav': to_json(self.nav),
            'fuel': to_json(self.fuel),
            'events': to_json(self.events),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            nav = from_json(models.ShipNav, v['nav']),
            fuel = from_json(models.ShipFuel, v['fuel']),
            events = from_json(list[models.ShipConditionEvent], v['events']),
        )

@dataclasses.dataclass
class OrbitShip:
    # The navigation information of the ship.
    nav: models.ShipNav

    def to_json(self) -> Json:
        v = {
            'nav': to_json(self.nav),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            nav = from_json(models.ShipNav, v['nav']),
        )

@dataclasses.dataclass
class PurchaseCargo:
    # Ship cargo details.
    cargo: models.ShipCargo
    # Result of a transaction with a market.
    transaction: models.MarketTransaction
    # Agent details.
    agent: models.Agent

    def to_json(self) -> Json:
        v = {
            'cargo': to_json(self.cargo),
            'transaction': to_json(self.transaction),
            'agent': to_json(self.agent),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            cargo = from_json(models.ShipCargo, v['cargo']),
            transaction = from_json(models.MarketTransaction, v['transaction']),
            agent = from_json(models.Agent, v['agent']),
        )

class Produce(Enum):
    """The type of good to produce out of the refining process."""

    IRON = 'IRON'
    COPPER = 'COPPER'
    SILVER = 'SILVER'
    GOLD = 'GOLD'
    ALUMINUM = 'ALUMINUM'
    PLATINUM = 'PLATINUM'
    URANITE = 'URANITE'
    MERITIUM = 'MERITIUM'
    FUEL = 'FUEL'

    def to_json(self) -> Json:
        return self.value

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        return cls(v)

@dataclasses.dataclass
class ShipRefine:

    @dataclasses.dataclass
    class ProducedItem:
        # The good's symbol.
        trade_symbol: models.TradeSymbol
        # Amount of units of the good.
        units: int

        def to_json(self) -> Json:
            v = {
                'tradeSymbol': to_json(self.trade_symbol),
                'units': to_json(self.units),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                trade_symbol = from_json(models.TradeSymbol, v['tradeSymbol']),
                units = from_json(int, v['units']),
            )

    @dataclasses.dataclass
    class ConsumedItem:
        # The good's symbol.
        trade_symbol: models.TradeSymbol
        # Amount of units of the good.
        units: int

        def to_json(self) -> Json:
            v = {
                'tradeSymbol': to_json(self.trade_symbol),
                'units': to_json(self.units),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                trade_symbol = from_json(models.TradeSymbol, v['tradeSymbol']),
                units = from_json(int, v['units']),
            )
    # Ship cargo details.
    cargo: models.ShipCargo
    # A cooldown is a period of time in which a ship cannot perform
    # certain actions.
    cooldown: models.Cooldown
    # Goods that were produced by this refining process.
    produced: list[ShipRefine.ProducedItem]
    # Goods that were consumed during this refining process.
    consumed: list[ShipRefine.ConsumedItem]

    def to_json(self) -> Json:
        v = {
            'cargo': to_json(self.cargo),
            'cooldown': to_json(self.cooldown),
            'produced': to_json(self.produced),
            'consumed': to_json(self.consumed),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            cargo = from_json(models.ShipCargo, v['cargo']),
            cooldown = from_json(models.Cooldown, v['cooldown']),
            produced = from_json(list[ShipRefine.ProducedItem], v['produced']),
            consumed = from_json(list[ShipRefine.ConsumedItem], v['consumed']),
        )

@dataclasses.dataclass
class RefuelShip:
    # Agent details.
    agent: models.Agent
    # Details of the ship's fuel tanks including how much fuel was
    # consumed during the last transit or action.
    fuel: models.ShipFuel
    # Result of a transaction with a market.
    transaction: models.MarketTransaction
    # Ship cargo details.
    cargo: models.ShipCargo | None = None

    def to_json(self) -> Json:
        v = {
            'agent': to_json(self.agent),
            'fuel': to_json(self.fuel),
            'transaction': to_json(self.transaction),
        }
        if self.cargo is not None:
            v['cargo'] = to_json(self.cargo)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            agent = from_json(models.Agent, v['agent']),
            fuel = from_json(models.ShipFuel, v['fuel']),
            transaction = from_json(models.MarketTransaction, v['transaction']),
            cargo = from_json(models.ShipCargo, v['cargo']) if 'cargo' in v else None,
        )

@dataclasses.dataclass
class RepairShip:
    # Agent details.
    agent: models.Agent
    # Ship details.
    ship: models.Ship
    # Result of a repair transaction.
    transaction: models.RepairTransaction

    def to_json(self) -> Json:
        v = {
            'agent': to_json(self.agent),
            'ship': to_json(self.ship),
            'transaction': to_json(self.transaction),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            agent = from_json(models.Agent, v['agent']),
            ship = from_json(models.Ship, v['ship']),
            transaction = from_json(models.RepairTransaction, v['transaction']),
        )

@dataclasses.dataclass
class GetRepairShip:
    # Result of a repair transaction.
    transaction: models.RepairTransaction

    def to_json(self) -> Json:
        v = {
            'transaction': to_json(self.transaction),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            transaction = from_json(models.RepairTransaction, v['transaction']),
        )

@dataclasses.dataclass
class SellCargo:
    # Ship cargo details.
    cargo: models.ShipCargo
    # Result of a transaction with a market.
    transaction: models.MarketTransaction
    # Agent details.
    agent: models.Agent

    def to_json(self) -> Json:
        v = {
            'cargo': to_json(self.cargo),
            'transaction': to_json(self.transaction),
            'agent': to_json(self.agent),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            cargo = from_json(models.ShipCargo, v['cargo']),
            transaction = from_json(models.MarketTransaction, v['transaction']),
            agent = from_json(models.Agent, v['agent']),
        )

@dataclasses.dataclass
class SiphonResources:
    # Siphon details.
    siphon: models.Siphon
    # A cooldown is a period of time in which a ship cannot perform
    # certain actions.
    cooldown: models.Cooldown
    # Ship cargo details.
    cargo: models.ShipCargo
    events: list[models.ShipConditionEvent]

    def to_json(self) -> Json:
        v = {
            'siphon': to_json(self.siphon),
            'cooldown': to_json(self.cooldown),
            'cargo': to_json(self.cargo),
            'events': to_json(self.events),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            siphon = from_json(models.Siphon, v['siphon']),
            cooldown = from_json(models.Cooldown, v['cooldown']),
            cargo = from_json(models.ShipCargo, v['cargo']),
            events = from_json(list[models.ShipConditionEvent], v['events']),
        )

@dataclasses.dataclass
class CreateSurvey:
    # A cooldown is a period of time in which a ship cannot perform
    # certain actions.
    cooldown: models.Cooldown
    # Surveys created by this action.
    surveys: list[models.Survey]

    def to_json(self) -> Json:
        v = {
            'cooldown': to_json(self.cooldown),
            'surveys': to_json(self.surveys),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            cooldown = from_json(models.Cooldown, v['cooldown']),
            surveys = from_json(list[models.Survey], v['surveys']),
        )

@dataclasses.dataclass
class TransferCargo:
    # Ship cargo details.
    cargo: models.ShipCargo
    # Ship cargo details.
    target_cargo: models.ShipCargo

    def to_json(self) -> Json:
        v = {
            'cargo': to_json(self.cargo),
            'targetCargo': to_json(self.target_cargo),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            cargo = from_json(models.ShipCargo, v['cargo']),
            target_cargo = from_json(models.ShipCargo, v['targetCargo']),
        )

@dataclasses.dataclass
class InstallShipModule:
    # Agent details.
    agent: models.Agent
    modules: list[models.ShipModule]
    # Ship cargo details.
    cargo: models.ShipCargo
    # Result of a transaction for a ship modification, such as
    # installing a mount or a module.
    transaction: models.ShipModificationTransaction

    def to_json(self) -> Json:
        v = {
            'agent': to_json(self.agent),
            'modules': to_json(self.modules),
            'cargo': to_json(self.cargo),
            'transaction': to_json(self.transaction),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            agent = from_json(models.Agent, v['agent']),
            modules = from_json(list[models.ShipModule], v['modules']),
            cargo = from_json(models.ShipCargo, v['cargo']),
            transaction = from_json(models.ShipModificationTransaction, v['transaction']),
        )

@dataclasses.dataclass
class RemoveShipModule:
    # Agent details.
    agent: models.Agent
    modules: list[models.ShipModule]
    # Ship cargo details.
    cargo: models.ShipCargo
    # Result of a transaction for a ship modification, such as
    # installing a mount or a module.
    transaction: models.ShipModificationTransaction

    def to_json(self) -> Json:
        v = {
            'agent': to_json(self.agent),
            'modules': to_json(self.modules),
            'cargo': to_json(self.cargo),
            'transaction': to_json(self.transaction),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            agent = from_json(models.Agent, v['agent']),
            modules = from_json(list[models.ShipModule], v['modules']),
            cargo = from_json(models.ShipCargo, v['cargo']),
            transaction = from_json(models.ShipModificationTransaction, v['transaction']),
        )

@dataclasses.dataclass
class InstallMount:
    # Agent details.
    agent: models.Agent
    # List of installed mounts after the installation of the new
    # mount.
    mounts: list[models.ShipMount]
    # Ship cargo details.
    cargo: models.ShipCargo
    # Result of a transaction for a ship modification, such as
    # installing a mount or a module.
    transaction: models.ShipModificationTransaction

    def to_json(self) -> Json:
        v = {
            'agent': to_json(self.agent),
            'mounts': to_json(self.mounts),
            'cargo': to_json(self.cargo),
            'transaction': to_json(self.transaction),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            agent = from_json(models.Agent, v['agent']),
            mounts = from_json(list[models.ShipMount], v['mounts']),
            cargo = from_json(models.ShipCargo, v['cargo']),
            transaction = from_json(models.ShipModificationTransaction, v['transaction']),
        )

@dataclasses.dataclass
class RemoveMount:
    # Agent details.
    agent: models.Agent
    # List of installed mounts after the removal of the selected
    # mount.
    mounts: list[models.ShipMount]
    # Ship cargo details.
    cargo: models.ShipCargo
    # Result of a transaction for a ship modification, such as
    # installing a mount or a module.
    transaction: models.ShipModificationTransaction

    def to_json(self) -> Json:
        v = {
            'agent': to_json(self.agent),
            'mounts': to_json(self.mounts),
            'cargo': to_json(self.cargo),
            'transaction': to_json(self.transaction),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            agent = from_json(models.Agent, v['agent']),
            mounts = from_json(list[models.ShipMount], v['mounts']),
            cargo = from_json(models.ShipCargo, v['cargo']),
            transaction = from_json(models.ShipModificationTransaction, v['transaction']),
        )

@dataclasses.dataclass
class PatchShipNav:
    # The navigation information of the ship.
    nav: models.ShipNav
    # Details of the ship's fuel tanks including how much fuel was
    # consumed during the last transit or action.
    fuel: models.ShipFuel
    events: list[models.ShipConditionEvent]

    def to_json(self) -> Json:
        v = {
            'nav': to_json(self.nav),
            'fuel': to_json(self.fuel),
            'events': to_json(self.events),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            nav = from_json(models.ShipNav, v['nav']),
            fuel = from_json(models.ShipFuel, v['fuel']),
            events = from_json(list[models.ShipConditionEvent], v['events']),
        )

@dataclasses.dataclass
class Register:
    # A Bearer token for accessing secured API endpoints.
    token: str
    # Agent details.
    agent: models.Agent
    # Faction details.
    faction: models.Faction
    # Contract details.
    contract: models.Contract
    ships: list[models.Ship]

    def to_json(self) -> Json:
        v = {
            'token': to_json(self.token),
            'agent': to_json(self.agent),
            'faction': to_json(self.faction),
            'contract': to_json(self.contract),
            'ships': to_json(self.ships),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            token = from_json(str, v['token']),
            agent = from_json(models.Agent, v['agent']),
            faction = from_json(models.Faction, v['faction']),
            contract = from_json(models.Contract, v['contract']),
            ships = from_json(list[models.Ship], v['ships']),
        )
