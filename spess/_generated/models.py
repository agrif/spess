# !!! THIS FILE IS GENERATED BY generate.py
# !!! DO NOT EDIT THIS FILE DIRECTLY

from __future__ import annotations

import dataclasses
import typing

from spess._json import Json, from_json, to_json
from spess._model_bases import date, datetime, Enum, Keyed

__all__ = [
    'ActivityLevel', 'Agent', 'AgentEvent', 'AgentLike', 'Chart',
    'ChartTransaction', 'Construction', 'ConstructionMaterial',
    'Contract', 'ContractDeliverGood', 'ContractLike', 'ContractPayment',
    'ContractTerms', 'Cooldown', 'Extraction', 'ExtractionYield',
    'Faction', 'FactionSymbol', 'FactionTrait', 'FactionTraitInfo',
    'FlightMode', 'JumpGate', 'Market', 'MarketTradeGood',
    'MarketTransaction', 'Meta', 'Produce', 'PublicAgent',
    'RepairTransaction', 'ScannedShip', 'ScannedSystem',
    'ScannedWaypoint', 'ScrapTransaction', 'Ship', 'ShipCargo',
    'ShipCargoItem', 'ShipConditionEvent', 'ShipCrew', 'ShipEngine',
    'ShipFrame', 'ShipFuel', 'ShipLike', 'ShipModificationTransaction',
    'ShipModule', 'ShipMount', 'ShipNav', 'ShipNavRoute',
    'ShipNavRouteWaypoint', 'ShipReactor', 'ShipRegistration',
    'ShipRequirements', 'ShipRole', 'ShipStatus', 'ShipType', 'Shipyard',
    'ShipyardShip', 'ShipyardTransaction', 'Siphon', 'SiphonYield',
    'SupplyLevel', 'Survey', 'SurveyDeposit', 'SurveySize', 'System',
    'SystemFaction', 'SystemLike', 'SystemType', 'SystemWaypoint',
    'TradeGood', 'TradeSymbol', 'Waypoint', 'WaypointFaction',
    'WaypointLike', 'WaypointModifier', 'WaypointModifierInfo',
    'WaypointOrbital', 'WaypointTrait', 'WaypointTraitInfo',
    'WaypointType',
]

# spec_name: Faction
@dataclasses.dataclass
class Faction:
    """Faction details."""

    #: The symbol of the faction.
    symbol: FactionSymbol
    #: Name of the faction.
    name: str
    #: Description of the faction.
    description: str
    #: List of traits that define this faction.
    traits: list[FactionTraitInfo]
    #: Whether or not the faction is currently recruiting new agents.
    is_recruiting: bool
    #: The waypoint in which the faction's HQ is located in.
    headquarters: str | None = None

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'name': to_json(self.name),
            'description': to_json(self.description),
            'traits': to_json(self.traits),
            'isRecruiting': to_json(self.is_recruiting),
        }
        if self.headquarters is not None:
            v['headquarters'] = to_json(self.headquarters)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(FactionSymbol, v['symbol']),
            name = from_json(str, v['name']),
            description = from_json(str, v['description']),
            traits = from_json(list[FactionTraitInfo], v['traits']),
            is_recruiting = from_json(bool, v['isRecruiting']),
            headquarters = from_json(str, v['headquarters']) if 'headquarters' in v else None,
        )

# spec_name: FactionSymbol
class FactionSymbol(Enum):
    """The symbol of the faction."""

    AEGIS = 'AEGIS'
    ANCIENTS = 'ANCIENTS'
    ASTRO = 'ASTRO'
    COBALT = 'COBALT'
    CORSAIRS = 'CORSAIRS'
    COSMIC = 'COSMIC'
    CULT = 'CULT'
    DOMINION = 'DOMINION'
    ECHO = 'ECHO'
    ETHEREAL = 'ETHEREAL'
    GALACTIC = 'GALACTIC'
    LORDS = 'LORDS'
    OBSIDIAN = 'OBSIDIAN'
    OMEGA = 'OMEGA'
    QUANTUM = 'QUANTUM'
    SHADOW = 'SHADOW'
    SOLITARY = 'SOLITARY'
    UNITED = 'UNITED'
    VOID = 'VOID'

# spec_name: FactionTrait
@dataclasses.dataclass
class FactionTraitInfo:
    __doc__ = ' '

    #: The unique identifier of the trait.
    symbol: FactionTrait
    #: The name of the trait.
    name: str
    #: A description of the trait.
    description: str

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'name': to_json(self.name),
            'description': to_json(self.description),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(FactionTrait, v['symbol']),
            name = from_json(str, v['name']),
            description = from_json(str, v['description']),
        )

# spec_name: FactionTraitSymbol
class FactionTrait(Enum):
    """The unique identifier of the trait."""

    ADAPTABLE = 'ADAPTABLE'
    AGGRESSIVE = 'AGGRESSIVE'
    BOLD = 'BOLD'
    BRUTAL = 'BRUTAL'
    BUREAUCRATIC = 'BUREAUCRATIC'
    CAPITALISTIC = 'CAPITALISTIC'
    CLAN = 'CLAN'
    COLLABORATIVE = 'COLLABORATIVE'
    COMMERCIAL = 'COMMERCIAL'
    COOPERATIVE = 'COOPERATIVE'
    CURIOUS = 'CURIOUS'
    DARING = 'DARING'
    DEFENSIVE = 'DEFENSIVE'
    DEXTEROUS = 'DEXTEROUS'
    DISTRUSTFUL = 'DISTRUSTFUL'
    DIVERSE = 'DIVERSE'
    DOMINANT = 'DOMINANT'
    DOMINION = 'DOMINION'
    ENTREPRENEURIAL = 'ENTREPRENEURIAL'
    ESTABLISHED = 'ESTABLISHED'
    EXILES = 'EXILES'
    EXPLORATORY = 'EXPLORATORY'
    FLEETING = 'FLEETING'
    FLEXIBLE = 'FLEXIBLE'
    FORSAKEN = 'FORSAKEN'
    FRAGMENTED = 'FRAGMENTED'
    FREE_MARKETS = 'FREE_MARKETS'
    FRINGE = 'FRINGE'
    GUILD = 'GUILD'
    IMPERIALISTIC = 'IMPERIALISTIC'
    INDEPENDENT = 'INDEPENDENT'
    INDUSTRIOUS = 'INDUSTRIOUS'
    INESCAPABLE = 'INESCAPABLE'
    INNOVATIVE = 'INNOVATIVE'
    INTELLIGENT = 'INTELLIGENT'
    ISOLATED = 'ISOLATED'
    LOCALIZED = 'LOCALIZED'
    MILITARISTIC = 'MILITARISTIC'
    NOTABLE = 'NOTABLE'
    PEACEFUL = 'PEACEFUL'
    PIRATES = 'PIRATES'
    PROGRESSIVE = 'PROGRESSIVE'
    PROUD = 'PROUD'
    RAIDERS = 'RAIDERS'
    REBELLIOUS = 'REBELLIOUS'
    RESEARCH_FOCUSED = 'RESEARCH_FOCUSED'
    RESOURCEFUL = 'RESOURCEFUL'
    SCAVENGERS = 'SCAVENGERS'
    SECRETIVE = 'SECRETIVE'
    SELF_INTERESTED = 'SELF_INTERESTED'
    SELF_SUFFICIENT = 'SELF_SUFFICIENT'
    SMUGGLERS = 'SMUGGLERS'
    STRATEGIC = 'STRATEGIC'
    TECHNOLOGICALLY_ADVANCED = 'TECHNOLOGICALLY_ADVANCED'
    TREASURE_HUNTERS = 'TREASURE_HUNTERS'
    UNITED = 'UNITED'
    UNPREDICTABLE = 'UNPREDICTABLE'
    VISIONARY = 'VISIONARY'
    WELCOMING = 'WELCOMING'

# spec_name: Meta
@dataclasses.dataclass
class Meta:
    """Meta details for pagination."""

    #: Shows the total amount of items of this kind that exist.
    total: int
    #: A page denotes an amount of items, offset from the first item.
    #: Each page holds an amount of items equal to the ``limit``.
    page: int
    #: The amount of items in each page. Limits how many items can be
    #: fetched at once.
    limit: int

    def to_json(self) -> Json:
        v = {
            'total': to_json(self.total),
            'page': to_json(self.page),
            'limit': to_json(self.limit),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            total = from_json(int, v['total']),
            page = from_json(int, v['page']),
            limit = from_json(int, v['limit']),
        )

# spec_name: PublicAgent
@dataclasses.dataclass
class PublicAgent:
    """Public agent details."""

    #: Symbol of the agent.
    symbol: str
    #: The headquarters of the agent.
    headquarters: str
    #: The number of credits the agent has available. Credits can be
    #: negative if funds have been overdrawn.
    credits: int
    #: The faction the agent started with.
    starting_faction: FactionSymbol
    #: How many ships are owned by the agent.
    ship_count: int

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'headquarters': to_json(self.headquarters),
            'credits': to_json(self.credits),
            'startingFaction': to_json(self.starting_faction),
            'shipCount': to_json(self.ship_count),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            headquarters = from_json(str, v['headquarters']),
            credits = from_json(int, v['credits']),
            starting_faction = from_json(FactionSymbol, v['startingFaction']),
            ship_count = from_json(int, v['shipCount']),
        )

class SystemLike(typing.Protocol):
    """This abstract class represents all objects that
    unambiguously refer to a single :class:`.System`. Any type that
    has the ``system_symbol`` attribute is accepted as a valid
    ``SystemLike``.
    """

    @property
    def system_symbol(self) -> str: ...

# spec_name: System
@dataclasses.dataclass(eq=False)
class System(Keyed):
    """System details."""

    _class_key: typing.ClassVar[str] = 'system_symbol'

    #: The symbol of the system.
    symbol: str
    #: The symbol of the sector.
    sector_symbol: str
    #: The type of system.
    type: SystemType
    #: Relative position of the system in the sector in the x axis.
    x: int
    #: Relative position of the system in the sector in the y axis.
    y: int
    #: Waypoints in this system.
    waypoints: list[SystemWaypoint]
    #: Factions that control this system.
    factions: list[SystemFaction]
    #: The constellation that the system is part of.
    constellation: str | None = None
    #: The name of the system.
    name: str | None = None

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'sectorSymbol': to_json(self.sector_symbol),
            'type': to_json(self.type),
            'x': to_json(self.x),
            'y': to_json(self.y),
            'waypoints': to_json(self.waypoints),
            'factions': to_json(self.factions),
        }
        if self.constellation is not None:
            v['constellation'] = to_json(self.constellation)
        if self.name is not None:
            v['name'] = to_json(self.name)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            sector_symbol = from_json(str, v['sectorSymbol']),
            type = from_json(SystemType, v['type']),
            x = from_json(int, v['x']),
            y = from_json(int, v['y']),
            waypoints = from_json(list[SystemWaypoint], v['waypoints']),
            factions = from_json(list[SystemFaction], v['factions']),
            constellation = from_json(str, v['constellation']) if 'constellation' in v else None,
            name = from_json(str, v['name']) if 'name' in v else None,
        )

    @property
    def system_symbol(self) -> str:
        """Alias for ``self.symbol``."""

        return self.symbol

# spec_name: SystemType
class SystemType(Enum):
    """The type of system."""

    BLACK_HOLE = 'BLACK_HOLE'
    BLUE_STAR = 'BLUE_STAR'
    HYPERGIANT = 'HYPERGIANT'
    NEBULA = 'NEBULA'
    NEUTRON_STAR = 'NEUTRON_STAR'
    ORANGE_STAR = 'ORANGE_STAR'
    RED_STAR = 'RED_STAR'
    UNSTABLE = 'UNSTABLE'
    WHITE_DWARF = 'WHITE_DWARF'
    YOUNG_STAR = 'YOUNG_STAR'

# spec_name: SystemWaypoint
@dataclasses.dataclass
class SystemWaypoint:
    """Waypoint details."""

    #: The symbol of the waypoint.
    symbol: str
    #: The type of waypoint.
    type: WaypointType
    #: Relative position of the waypoint on the system's x axis. This
    #: is not an absolute position in the universe.
    x: int
    #: Relative position of the waypoint on the system's y axis. This
    #: is not an absolute position in the universe.
    y: int
    #: Waypoints that orbit this waypoint.
    orbitals: list[WaypointOrbital]
    #: The symbol of the parent waypoint, if this waypoint is in orbit
    #: around another waypoint. Otherwise this value is undefined.
    orbits: str | None = None

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'type': to_json(self.type),
            'x': to_json(self.x),
            'y': to_json(self.y),
            'orbitals': to_json(self.orbitals),
        }
        if self.orbits is not None:
            v['orbits'] = to_json(self.orbits)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            type = from_json(WaypointType, v['type']),
            x = from_json(int, v['x']),
            y = from_json(int, v['y']),
            orbitals = from_json(list[WaypointOrbital], v['orbitals']),
            orbits = from_json(str, v['orbits']) if 'orbits' in v else None,
        )

# spec_name: WaypointType
class WaypointType(Enum):
    """The type of waypoint."""

    ARTIFICIAL_GRAVITY_WELL = 'ARTIFICIAL_GRAVITY_WELL'
    ASTEROID = 'ASTEROID'
    ASTEROID_BASE = 'ASTEROID_BASE'
    ASTEROID_FIELD = 'ASTEROID_FIELD'
    DEBRIS_FIELD = 'DEBRIS_FIELD'
    ENGINEERED_ASTEROID = 'ENGINEERED_ASTEROID'
    FUEL_STATION = 'FUEL_STATION'
    GAS_GIANT = 'GAS_GIANT'
    GRAVITY_WELL = 'GRAVITY_WELL'
    JUMP_GATE = 'JUMP_GATE'
    MOON = 'MOON'
    NEBULA = 'NEBULA'
    ORBITAL_STATION = 'ORBITAL_STATION'
    PLANET = 'PLANET'

# spec_name: WaypointOrbital
@dataclasses.dataclass
class WaypointOrbital:
    """An orbital is another waypoint that orbits a parent
    waypoint.
    """

    #: The symbol of the orbiting waypoint.
    symbol: str

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
        )

# spec_name: SystemFaction
@dataclasses.dataclass
class SystemFaction:
    __doc__ = ' '

    #: The symbol of the faction.
    symbol: FactionSymbol

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(FactionSymbol, v['symbol']),
        )

class WaypointLike(typing.Protocol):
    """This abstract class represents all objects that
    unambiguously refer to a single :class:`.Waypoint`. Any type that
    has the ``waypoint_symbol`` attribute is accepted as a valid
    ``WaypointLike``.
    """

    @property
    def waypoint_symbol(self) -> str: ...

# spec_name: Waypoint
@dataclasses.dataclass(eq=False)
class Waypoint(Keyed):
    """A waypoint is a location that ships can travel to such as
    a Planet, Moon or Space Station.
    """

    _class_key: typing.ClassVar[str] = 'waypoint_symbol'

    #: The symbol of the waypoint.
    symbol: str
    #: The type of waypoint.
    type: WaypointType
    #: The symbol of the system.
    system_symbol: str
    #: Relative position of the waypoint on the system's x axis. This
    #: is not an absolute position in the universe.
    x: int
    #: Relative position of the waypoint on the system's y axis. This
    #: is not an absolute position in the universe.
    y: int
    #: Waypoints that orbit this waypoint.
    orbitals: list[WaypointOrbital]
    #: The traits of the waypoint.
    traits: list[WaypointTraitInfo]
    #: True if the waypoint is under construction.
    is_under_construction: bool
    #: The symbol of the parent waypoint, if this waypoint is in orbit
    #: around another waypoint. Otherwise this value is undefined.
    orbits: str | None = None
    #: The faction that controls the waypoint.
    faction: WaypointFaction | None = None
    #: The modifiers of the waypoint.
    modifiers: list[WaypointModifierInfo] | None = None
    #: The chart of a system or waypoint, which makes the location
    #: visible to other agents.
    chart: Chart | None = None

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'type': to_json(self.type),
            'systemSymbol': to_json(self.system_symbol),
            'x': to_json(self.x),
            'y': to_json(self.y),
            'orbitals': to_json(self.orbitals),
            'traits': to_json(self.traits),
            'isUnderConstruction': to_json(self.is_under_construction),
        }
        if self.orbits is not None:
            v['orbits'] = to_json(self.orbits)
        if self.faction is not None:
            v['faction'] = to_json(self.faction)
        if self.modifiers is not None:
            v['modifiers'] = to_json(self.modifiers)
        if self.chart is not None:
            v['chart'] = to_json(self.chart)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            type = from_json(WaypointType, v['type']),
            system_symbol = from_json(str, v['systemSymbol']),
            x = from_json(int, v['x']),
            y = from_json(int, v['y']),
            orbitals = from_json(list[WaypointOrbital], v['orbitals']),
            traits = from_json(list[WaypointTraitInfo], v['traits']),
            is_under_construction = from_json(bool, v['isUnderConstruction']),
            orbits = from_json(str, v['orbits']) if 'orbits' in v else None,
            faction = from_json(WaypointFaction, v['faction']) if 'faction' in v else None,
            modifiers = from_json(list[WaypointModifierInfo], v['modifiers']) if 'modifiers' in v else None,
            chart = from_json(Chart, v['chart']) if 'chart' in v else None,
        )

    @property
    def waypoint_symbol(self) -> str:
        """Alias for ``self.symbol``."""

        return self.symbol

# spec_name: WaypointFaction
@dataclasses.dataclass
class WaypointFaction:
    """The faction that controls the waypoint."""

    #: The symbol of the faction.
    symbol: FactionSymbol

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(FactionSymbol, v['symbol']),
        )

# spec_name: WaypointTrait
@dataclasses.dataclass
class WaypointTraitInfo:
    __doc__ = ' '

    #: The unique identifier of the trait.
    symbol: WaypointTrait
    #: The name of the trait.
    name: str
    #: A description of the trait.
    description: str

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'name': to_json(self.name),
            'description': to_json(self.description),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(WaypointTrait, v['symbol']),
            name = from_json(str, v['name']),
            description = from_json(str, v['description']),
        )

# spec_name: WaypointTraitSymbol
class WaypointTrait(Enum):
    """The unique identifier of the trait."""

    ASH_CLOUDS = 'ASH_CLOUDS'
    BARREN = 'BARREN'
    BLACK_MARKET = 'BLACK_MARKET'
    BREATHABLE_ATMOSPHERE = 'BREATHABLE_ATMOSPHERE'
    BUREAUCRATIC = 'BUREAUCRATIC'
    CANYONS = 'CANYONS'
    COMMON_METAL_DEPOSITS = 'COMMON_METAL_DEPOSITS'
    CORROSIVE_ATMOSPHERE = 'CORROSIVE_ATMOSPHERE'
    CORRUPT = 'CORRUPT'
    CRUSHING_GRAVITY = 'CRUSHING_GRAVITY'
    DEBRIS_CLUSTER = 'DEBRIS_CLUSTER'
    DEEP_CRATERS = 'DEEP_CRATERS'
    DIVERSE_LIFE = 'DIVERSE_LIFE'
    DRY_SEABEDS = 'DRY_SEABEDS'
    EXPLORATION_OUTPOST = 'EXPLORATION_OUTPOST'
    EXPLOSIVE_GASES = 'EXPLOSIVE_GASES'
    EXTREME_PRESSURE = 'EXTREME_PRESSURE'
    EXTREME_TEMPERATURES = 'EXTREME_TEMPERATURES'
    FOSSILS = 'FOSSILS'
    FROZEN = 'FROZEN'
    HIGH_TECH = 'HIGH_TECH'
    HOLLOWED_INTERIOR = 'HOLLOWED_INTERIOR'
    ICE_CRYSTALS = 'ICE_CRYSTALS'
    INDUSTRIAL = 'INDUSTRIAL'
    JOVIAN = 'JOVIAN'
    JUNGLE = 'JUNGLE'
    MAGMA_SEAS = 'MAGMA_SEAS'
    MARKETPLACE = 'MARKETPLACE'
    MEGA_STRUCTURES = 'MEGA_STRUCTURES'
    METHANE_POOLS = 'METHANE_POOLS'
    MICRO_GRAVITY_ANOMALIES = 'MICRO_GRAVITY_ANOMALIES'
    MILITARY_BASE = 'MILITARY_BASE'
    MINERAL_DEPOSITS = 'MINERAL_DEPOSITS'
    MUTATED_FLORA = 'MUTATED_FLORA'
    OCEAN = 'OCEAN'
    OUTPOST = 'OUTPOST'
    OVERCROWDED = 'OVERCROWDED'
    PERPETUAL_DAYLIGHT = 'PERPETUAL_DAYLIGHT'
    PERPETUAL_OVERCAST = 'PERPETUAL_OVERCAST'
    PIRATE_BASE = 'PIRATE_BASE'
    PRECIOUS_METAL_DEPOSITS = 'PRECIOUS_METAL_DEPOSITS'
    RADIOACTIVE = 'RADIOACTIVE'
    RARE_METAL_DEPOSITS = 'RARE_METAL_DEPOSITS'
    RESEARCH_FACILITY = 'RESEARCH_FACILITY'
    ROCKY = 'ROCKY'
    SALT_FLATS = 'SALT_FLATS'
    SCARCE_LIFE = 'SCARCE_LIFE'
    SCATTERED_SETTLEMENTS = 'SCATTERED_SETTLEMENTS'
    SHALLOW_CRATERS = 'SHALLOW_CRATERS'
    SHIPYARD = 'SHIPYARD'
    SPRAWLING_CITIES = 'SPRAWLING_CITIES'
    STRIPPED = 'STRIPPED'
    STRONG_GRAVITY = 'STRONG_GRAVITY'
    STRONG_MAGNETOSPHERE = 'STRONG_MAGNETOSPHERE'
    SUPERVOLCANOES = 'SUPERVOLCANOES'
    SURVEILLANCE_OUTPOST = 'SURVEILLANCE_OUTPOST'
    SWAMP = 'SWAMP'
    TEMPERATE = 'TEMPERATE'
    TERRAFORMED = 'TERRAFORMED'
    THIN_ATMOSPHERE = 'THIN_ATMOSPHERE'
    TOXIC_ATMOSPHERE = 'TOXIC_ATMOSPHERE'
    TRADING_HUB = 'TRADING_HUB'
    UNCHARTED = 'UNCHARTED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    UNSTABLE_COMPOSITION = 'UNSTABLE_COMPOSITION'
    VAST_RUINS = 'VAST_RUINS'
    VIBRANT_AURORAS = 'VIBRANT_AURORAS'
    VOLCANIC = 'VOLCANIC'
    WEAK_GRAVITY = 'WEAK_GRAVITY'

# spec_name: WaypointModifier
@dataclasses.dataclass
class WaypointModifierInfo:
    __doc__ = ' '

    #: The unique identifier of the modifier.
    symbol: WaypointModifier
    #: The name of the trait.
    name: str
    #: A description of the trait.
    description: str

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'name': to_json(self.name),
            'description': to_json(self.description),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(WaypointModifier, v['symbol']),
            name = from_json(str, v['name']),
            description = from_json(str, v['description']),
        )

# spec_name: WaypointModifierSymbol
class WaypointModifier(Enum):
    """The unique identifier of the modifier."""

    CIVIL_UNREST = 'CIVIL_UNREST'
    CRITICAL_LIMIT = 'CRITICAL_LIMIT'
    RADIATION_LEAK = 'RADIATION_LEAK'
    STRIPPED = 'STRIPPED'
    UNSTABLE = 'UNSTABLE'

# spec_name: Chart
@dataclasses.dataclass
class Chart:
    """The chart of a system or waypoint, which makes the
    location visible to other agents.
    """

    #: The symbol of the waypoint.
    waypoint_symbol: str
    #: The agent that submitted the chart for this waypoint.
    submitted_by: str
    #: The time the chart for this waypoint was submitted.
    submitted_on: datetime

    def to_json(self) -> Json:
        v = {
            'waypointSymbol': to_json(self.waypoint_symbol),
            'submittedBy': to_json(self.submitted_by),
            'submittedOn': to_json(self.submitted_on),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            waypoint_symbol = from_json(str, v['waypointSymbol']),
            submitted_by = from_json(str, v['submittedBy']),
            submitted_on = from_json(datetime, v['submittedOn']),
        )

# spec_name: Construction
@dataclasses.dataclass
class Construction:
    """The construction details of a waypoint."""

    #: The symbol of the waypoint.
    symbol: str
    #: The materials required to construct the waypoint.
    materials: list[ConstructionMaterial]
    #: Whether the waypoint has been constructed.
    is_complete: bool

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'materials': to_json(self.materials),
            'isComplete': to_json(self.is_complete),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            materials = from_json(list[ConstructionMaterial], v['materials']),
            is_complete = from_json(bool, v['isComplete']),
        )

# spec_name: ConstructionMaterial
@dataclasses.dataclass
class ConstructionMaterial:
    """The details of the required construction materials for a
    given waypoint under construction.
    """

    #: The good's symbol.
    trade_symbol: TradeSymbol
    #: The number of units required.
    required: int
    #: The number of units fulfilled toward the required amount.
    fulfilled: int

    def to_json(self) -> Json:
        v = {
            'tradeSymbol': to_json(self.trade_symbol),
            'required': to_json(self.required),
            'fulfilled': to_json(self.fulfilled),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            trade_symbol = from_json(TradeSymbol, v['tradeSymbol']),
            required = from_json(int, v['required']),
            fulfilled = from_json(int, v['fulfilled']),
        )

# spec_name: TradeSymbol
class TradeSymbol(Enum):
    """The good's symbol."""

    ADVANCED_CIRCUITRY = 'ADVANCED_CIRCUITRY'
    AI_MAINFRAMES = 'AI_MAINFRAMES'
    ALUMINUM = 'ALUMINUM'
    ALUMINUM_ORE = 'ALUMINUM_ORE'
    AMMONIA_ICE = 'AMMONIA_ICE'
    AMMUNITION = 'AMMUNITION'
    ANTIMATTER = 'ANTIMATTER'
    ASSAULT_RIFLES = 'ASSAULT_RIFLES'
    BIOCOMPOSITES = 'BIOCOMPOSITES'
    BOTANICAL_SPECIMENS = 'BOTANICAL_SPECIMENS'
    CLOTHING = 'CLOTHING'
    COPPER = 'COPPER'
    COPPER_ORE = 'COPPER_ORE'
    CULTURAL_ARTIFACTS = 'CULTURAL_ARTIFACTS'
    CYBER_IMPLANTS = 'CYBER_IMPLANTS'
    DIAMONDS = 'DIAMONDS'
    DRUGS = 'DRUGS'
    ELECTRONICS = 'ELECTRONICS'
    ENGINE_HYPER_DRIVE_I = 'ENGINE_HYPER_DRIVE_I'
    ENGINE_IMPULSE_DRIVE_I = 'ENGINE_IMPULSE_DRIVE_I'
    ENGINE_ION_DRIVE_I = 'ENGINE_ION_DRIVE_I'
    ENGINE_ION_DRIVE_II = 'ENGINE_ION_DRIVE_II'
    EQUIPMENT = 'EQUIPMENT'
    EXOTIC_MATTER = 'EXOTIC_MATTER'
    EXPLOSIVES = 'EXPLOSIVES'
    FABRICS = 'FABRICS'
    FAB_MATS = 'FAB_MATS'
    FERTILIZERS = 'FERTILIZERS'
    FIREARMS = 'FIREARMS'
    FOOD = 'FOOD'
    FRAME_BULK_FREIGHTER = 'FRAME_BULK_FREIGHTER'
    FRAME_CARRIER = 'FRAME_CARRIER'
    FRAME_CRUISER = 'FRAME_CRUISER'
    FRAME_DESTROYER = 'FRAME_DESTROYER'
    FRAME_DRONE = 'FRAME_DRONE'
    FRAME_EXPLORER = 'FRAME_EXPLORER'
    FRAME_FIGHTER = 'FRAME_FIGHTER'
    FRAME_FRIGATE = 'FRAME_FRIGATE'
    FRAME_HEAVY_FREIGHTER = 'FRAME_HEAVY_FREIGHTER'
    FRAME_INTERCEPTOR = 'FRAME_INTERCEPTOR'
    FRAME_LIGHT_FREIGHTER = 'FRAME_LIGHT_FREIGHTER'
    FRAME_MINER = 'FRAME_MINER'
    FRAME_PROBE = 'FRAME_PROBE'
    FRAME_RACER = 'FRAME_RACER'
    FRAME_SHUTTLE = 'FRAME_SHUTTLE'
    FRAME_TRANSPORT = 'FRAME_TRANSPORT'
    FUEL = 'FUEL'
    GENE_THERAPEUTICS = 'GENE_THERAPEUTICS'
    GOLD = 'GOLD'
    GOLD_ORE = 'GOLD_ORE'
    GRAVITON_EMITTERS = 'GRAVITON_EMITTERS'
    HOLOGRAPHICS = 'HOLOGRAPHICS'
    HYDROCARBON = 'HYDROCARBON'
    ICE_WATER = 'ICE_WATER'
    IRON = 'IRON'
    IRON_ORE = 'IRON_ORE'
    JEWELRY = 'JEWELRY'
    LAB_INSTRUMENTS = 'LAB_INSTRUMENTS'
    LASER_RIFLES = 'LASER_RIFLES'
    LIQUID_HYDROGEN = 'LIQUID_HYDROGEN'
    LIQUID_NITROGEN = 'LIQUID_NITROGEN'
    MACHINERY = 'MACHINERY'
    MEDICINE = 'MEDICINE'
    MERITIUM = 'MERITIUM'
    MERITIUM_ORE = 'MERITIUM_ORE'
    MICROPROCESSORS = 'MICROPROCESSORS'
    MICRO_FUSION_GENERATORS = 'MICRO_FUSION_GENERATORS'
    MILITARY_EQUIPMENT = 'MILITARY_EQUIPMENT'
    MODULE_CARGO_HOLD_I = 'MODULE_CARGO_HOLD_I'
    MODULE_CARGO_HOLD_II = 'MODULE_CARGO_HOLD_II'
    MODULE_CARGO_HOLD_III = 'MODULE_CARGO_HOLD_III'
    MODULE_CREW_QUARTERS_I = 'MODULE_CREW_QUARTERS_I'
    MODULE_ENVOY_QUARTERS_I = 'MODULE_ENVOY_QUARTERS_I'
    MODULE_FUEL_REFINERY_I = 'MODULE_FUEL_REFINERY_I'
    MODULE_GAS_PROCESSOR_I = 'MODULE_GAS_PROCESSOR_I'
    MODULE_JUMP_DRIVE_I = 'MODULE_JUMP_DRIVE_I'
    MODULE_JUMP_DRIVE_II = 'MODULE_JUMP_DRIVE_II'
    MODULE_JUMP_DRIVE_III = 'MODULE_JUMP_DRIVE_III'
    MODULE_MICRO_REFINERY_I = 'MODULE_MICRO_REFINERY_I'
    MODULE_MINERAL_PROCESSOR_I = 'MODULE_MINERAL_PROCESSOR_I'
    MODULE_ORE_REFINERY_I = 'MODULE_ORE_REFINERY_I'
    MODULE_PASSENGER_CABIN_I = 'MODULE_PASSENGER_CABIN_I'
    MODULE_SCIENCE_LAB_I = 'MODULE_SCIENCE_LAB_I'
    MODULE_SHIELD_GENERATOR_I = 'MODULE_SHIELD_GENERATOR_I'
    MODULE_SHIELD_GENERATOR_II = 'MODULE_SHIELD_GENERATOR_II'
    MODULE_WARP_DRIVE_I = 'MODULE_WARP_DRIVE_I'
    MODULE_WARP_DRIVE_II = 'MODULE_WARP_DRIVE_II'
    MODULE_WARP_DRIVE_III = 'MODULE_WARP_DRIVE_III'
    MOOD_REGULATORS = 'MOOD_REGULATORS'
    MOUNT_GAS_SIPHON_I = 'MOUNT_GAS_SIPHON_I'
    MOUNT_GAS_SIPHON_II = 'MOUNT_GAS_SIPHON_II'
    MOUNT_GAS_SIPHON_III = 'MOUNT_GAS_SIPHON_III'
    MOUNT_LASER_CANNON_I = 'MOUNT_LASER_CANNON_I'
    MOUNT_MINING_LASER_I = 'MOUNT_MINING_LASER_I'
    MOUNT_MINING_LASER_II = 'MOUNT_MINING_LASER_II'
    MOUNT_MINING_LASER_III = 'MOUNT_MINING_LASER_III'
    MOUNT_MISSILE_LAUNCHER_I = 'MOUNT_MISSILE_LAUNCHER_I'
    MOUNT_SENSOR_ARRAY_I = 'MOUNT_SENSOR_ARRAY_I'
    MOUNT_SENSOR_ARRAY_II = 'MOUNT_SENSOR_ARRAY_II'
    MOUNT_SENSOR_ARRAY_III = 'MOUNT_SENSOR_ARRAY_III'
    MOUNT_SURVEYOR_I = 'MOUNT_SURVEYOR_I'
    MOUNT_SURVEYOR_II = 'MOUNT_SURVEYOR_II'
    MOUNT_SURVEYOR_III = 'MOUNT_SURVEYOR_III'
    MOUNT_TURRET_I = 'MOUNT_TURRET_I'
    NANOBOTS = 'NANOBOTS'
    NEURAL_CHIPS = 'NEURAL_CHIPS'
    NOVEL_LIFEFORMS = 'NOVEL_LIFEFORMS'
    PLASTICS = 'PLASTICS'
    PLATINUM = 'PLATINUM'
    PLATINUM_ORE = 'PLATINUM_ORE'
    POLYNUCLEOTIDES = 'POLYNUCLEOTIDES'
    PRECIOUS_STONES = 'PRECIOUS_STONES'
    QUANTUM_DRIVES = 'QUANTUM_DRIVES'
    QUANTUM_STABILIZERS = 'QUANTUM_STABILIZERS'
    QUARTZ_SAND = 'QUARTZ_SAND'
    REACTOR_ANTIMATTER_I = 'REACTOR_ANTIMATTER_I'
    REACTOR_CHEMICAL_I = 'REACTOR_CHEMICAL_I'
    REACTOR_FISSION_I = 'REACTOR_FISSION_I'
    REACTOR_FUSION_I = 'REACTOR_FUSION_I'
    REACTOR_SOLAR_I = 'REACTOR_SOLAR_I'
    RELIC_TECH = 'RELIC_TECH'
    ROBOTIC_DRONES = 'ROBOTIC_DRONES'
    SHIP_BULK_FREIGHTER = 'SHIP_BULK_FREIGHTER'
    SHIP_COMMAND_FRIGATE = 'SHIP_COMMAND_FRIGATE'
    SHIP_EXPLORER = 'SHIP_EXPLORER'
    SHIP_HEAVY_FREIGHTER = 'SHIP_HEAVY_FREIGHTER'
    SHIP_INTERCEPTOR = 'SHIP_INTERCEPTOR'
    SHIP_LIGHT_HAULER = 'SHIP_LIGHT_HAULER'
    SHIP_LIGHT_SHUTTLE = 'SHIP_LIGHT_SHUTTLE'
    SHIP_MINING_DRONE = 'SHIP_MINING_DRONE'
    SHIP_ORE_HOUND = 'SHIP_ORE_HOUND'
    SHIP_PARTS = 'SHIP_PARTS'
    SHIP_PLATING = 'SHIP_PLATING'
    SHIP_PROBE = 'SHIP_PROBE'
    SHIP_REFINING_FREIGHTER = 'SHIP_REFINING_FREIGHTER'
    SHIP_SALVAGE = 'SHIP_SALVAGE'
    SHIP_SIPHON_DRONE = 'SHIP_SIPHON_DRONE'
    SHIP_SURVEYOR = 'SHIP_SURVEYOR'
    SILICON_CRYSTALS = 'SILICON_CRYSTALS'
    SILVER = 'SILVER'
    SILVER_ORE = 'SILVER_ORE'
    SUPERGRAINS = 'SUPERGRAINS'
    URANITE = 'URANITE'
    URANITE_ORE = 'URANITE_ORE'
    VIRAL_AGENTS = 'VIRAL_AGENTS'

# spec_name: ShipCargo
@dataclasses.dataclass
class ShipCargo:
    """Ship cargo details."""

    #: The max number of items that can be stored in the cargo hold.
    capacity: int
    #: The number of items currently stored in the cargo hold.
    units: int
    #: The items currently in the cargo hold.
    inventory: list[ShipCargoItem]

    def to_json(self) -> Json:
        v = {
            'capacity': to_json(self.capacity),
            'units': to_json(self.units),
            'inventory': to_json(self.inventory),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            capacity = from_json(int, v['capacity']),
            units = from_json(int, v['units']),
            inventory = from_json(list[ShipCargoItem], v['inventory']),
        )

# spec_name: ShipCargoItem
@dataclasses.dataclass
class ShipCargoItem:
    """The type of cargo item and the number of units."""

    #: The good's symbol.
    symbol: TradeSymbol
    #: The name of the cargo item type.
    name: str
    #: The description of the cargo item type.
    description: str
    #: The number of units of the cargo item.
    units: int

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'name': to_json(self.name),
            'description': to_json(self.description),
            'units': to_json(self.units),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(TradeSymbol, v['symbol']),
            name = from_json(str, v['name']),
            description = from_json(str, v['description']),
            units = from_json(int, v['units']),
        )

# spec_name: Market
@dataclasses.dataclass
class Market:
    """Market details."""

    #: The symbol of the market. The symbol is the same as the
    #: waypoint where the market is located.
    symbol: str
    #: The list of goods that are exported from this market.
    exports: list[TradeGood]
    #: The list of goods that are sought as imports in this market.
    imports: list[TradeGood]
    #: The list of goods that are bought and sold between agents at
    #: this market.
    exchange: list[TradeGood]
    #: The list of recent transactions at this market. Visible only
    #: when a ship is present at the market.
    transactions: list[MarketTransaction] | None = None
    #: The list of goods that are traded at this market. Visible only
    #: when a ship is present at the market.
    trade_goods: list[MarketTradeGood] | None = None

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'exports': to_json(self.exports),
            'imports': to_json(self.imports),
            'exchange': to_json(self.exchange),
        }
        if self.transactions is not None:
            v['transactions'] = to_json(self.transactions)
        if self.trade_goods is not None:
            v['tradeGoods'] = to_json(self.trade_goods)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            exports = from_json(list[TradeGood], v['exports']),
            imports = from_json(list[TradeGood], v['imports']),
            exchange = from_json(list[TradeGood], v['exchange']),
            transactions = from_json(list[MarketTransaction], v['transactions']) if 'transactions' in v else None,
            trade_goods = from_json(list[MarketTradeGood], v['tradeGoods']) if 'tradeGoods' in v else None,
        )

# spec_name: TradeGood
@dataclasses.dataclass
class TradeGood:
    """A good that can be traded for other goods or currency."""

    #: The good's symbol.
    symbol: TradeSymbol
    #: The name of the good.
    name: str
    #: The description of the good.
    description: str

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'name': to_json(self.name),
            'description': to_json(self.description),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(TradeSymbol, v['symbol']),
            name = from_json(str, v['name']),
            description = from_json(str, v['description']),
        )

# spec_name: MarketTransaction
@dataclasses.dataclass
class MarketTransaction:
    """Result of a transaction with a market."""

    # spec_name: MarketTransaction.type
    class Type(Enum):
        """The type of transaction."""

        PURCHASE = 'PURCHASE'
        SELL = 'SELL'

    #: The symbol of the waypoint.
    waypoint_symbol: str
    #: The symbol of the ship that made the transaction.
    ship_symbol: str
    #: The symbol of the trade good.
    trade_symbol: str
    #: The type of transaction.
    type: MarketTransaction.Type
    #: The number of units of the transaction.
    units: int
    #: The price per unit of the transaction.
    price_per_unit: int
    #: The total price of the transaction.
    total_price: int
    #: The timestamp of the transaction.
    timestamp: datetime

    def to_json(self) -> Json:
        v = {
            'waypointSymbol': to_json(self.waypoint_symbol),
            'shipSymbol': to_json(self.ship_symbol),
            'tradeSymbol': to_json(self.trade_symbol),
            'type': to_json(self.type),
            'units': to_json(self.units),
            'pricePerUnit': to_json(self.price_per_unit),
            'totalPrice': to_json(self.total_price),
            'timestamp': to_json(self.timestamp),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            waypoint_symbol = from_json(str, v['waypointSymbol']),
            ship_symbol = from_json(str, v['shipSymbol']),
            trade_symbol = from_json(str, v['tradeSymbol']),
            type = from_json(MarketTransaction.Type, v['type']),
            units = from_json(int, v['units']),
            price_per_unit = from_json(int, v['pricePerUnit']),
            total_price = from_json(int, v['totalPrice']),
            timestamp = from_json(datetime, v['timestamp']),
        )

# spec_name: MarketTradeGood
@dataclasses.dataclass
class MarketTradeGood:
    __doc__ = ' '

    # spec_name: MarketTradeGood.type
    class Type(Enum):
        """The type of trade good (export, import, or exchange)."""

        EXCHANGE = 'EXCHANGE'
        EXPORT = 'EXPORT'
        IMPORT = 'IMPORT'

    #: The good's symbol.
    symbol: TradeSymbol
    #: The type of trade good (export, import, or exchange).
    type: MarketTradeGood.Type
    #: This is the maximum number of units that can be purchased or
    #: sold at this market in a single trade for this good. Trade
    #: volume also gives an indication of price volatility. A market
    #: with a low trade volume will have large price swings, while
    #: high trade volume will be more resilient to price changes.
    trade_volume: int
    #: The supply level of a trade good.
    supply: SupplyLevel
    #: The price at which this good can be purchased from the market.
    purchase_price: int
    #: The price at which this good can be sold to the market.
    sell_price: int
    #: The activity level of a trade good. If the good is an import,
    #: this represents how strong consumption is. If the good is an
    #: export, this represents how strong the production is for the
    #: good. When activity is strong, consumption or production is
    #: near maximum capacity. When activity is weak, consumption or
    #: production is near minimum capacity.
    activity: ActivityLevel | None = None

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'type': to_json(self.type),
            'tradeVolume': to_json(self.trade_volume),
            'supply': to_json(self.supply),
            'purchasePrice': to_json(self.purchase_price),
            'sellPrice': to_json(self.sell_price),
        }
        if self.activity is not None:
            v['activity'] = to_json(self.activity)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(TradeSymbol, v['symbol']),
            type = from_json(MarketTradeGood.Type, v['type']),
            trade_volume = from_json(int, v['tradeVolume']),
            supply = from_json(SupplyLevel, v['supply']),
            purchase_price = from_json(int, v['purchasePrice']),
            sell_price = from_json(int, v['sellPrice']),
            activity = from_json(ActivityLevel, v['activity']) if 'activity' in v else None,
        )

# spec_name: SupplyLevel
class SupplyLevel(Enum):
    """The supply level of a trade good."""

    ABUNDANT = 'ABUNDANT'
    HIGH = 'HIGH'
    LIMITED = 'LIMITED'
    MODERATE = 'MODERATE'
    SCARCE = 'SCARCE'

# spec_name: ActivityLevel
class ActivityLevel(Enum):
    """The activity level of a trade good. If the good is an
    import, this represents how strong consumption is. If the good is
    an export, this represents how strong the production is for the
    good. When activity is strong, consumption or production is near
    maximum capacity. When activity is weak, consumption or production
    is near minimum capacity.
    """

    GROWING = 'GROWING'
    RESTRICTED = 'RESTRICTED'
    STRONG = 'STRONG'
    WEAK = 'WEAK'

# spec_name: JumpGate
@dataclasses.dataclass
class JumpGate:
    """Details of a jump gate waypoint."""

    #: The symbol of the waypoint.
    symbol: str
    #: All the gates that are connected to this waypoint.
    connections: list[str]

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'connections': to_json(self.connections),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            connections = from_json(list[str], v['connections']),
        )

# spec_name: Shipyard
@dataclasses.dataclass
class Shipyard:
    """Shipyard details."""

    # spec_name: Shipyard.shipTypes
    @dataclasses.dataclass
    class ShipType:
        __doc__ = ' '

        #: Type of ship
        type: ShipType

        def to_json(self) -> Json:
            v = {
                'type': to_json(self.type),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                type = from_json(ShipType, v['type']),
            )

    #: The symbol of the shipyard. The symbol is the same as the
    #: waypoint where the shipyard is located.
    symbol: str
    #: The list of ship types available for purchase at this shipyard.
    ship_types: list[Shipyard.ShipType]
    #: The fee to modify a ship at this shipyard. This includes
    #: installing or removing modules and mounts on a ship. In the
    #: case of mounts, the fee is a flat rate per mount. In the case
    #: of modules, the fee is per slot the module occupies.
    modifications_fee: int
    #: The list of recent transactions at this shipyard.
    transactions: list[ShipyardTransaction] | None = None
    #: The ships that are currently available for purchase at the
    #: shipyard.
    ships: list[ShipyardShip] | None = None

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'shipTypes': to_json(self.ship_types),
            'modificationsFee': to_json(self.modifications_fee),
        }
        if self.transactions is not None:
            v['transactions'] = to_json(self.transactions)
        if self.ships is not None:
            v['ships'] = to_json(self.ships)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            ship_types = from_json(list[Shipyard.ShipType], v['shipTypes']),
            modifications_fee = from_json(int, v['modificationsFee']),
            transactions = from_json(list[ShipyardTransaction], v['transactions']) if 'transactions' in v else None,
            ships = from_json(list[ShipyardShip], v['ships']) if 'ships' in v else None,
        )

# spec_name: ShipType
class ShipType(Enum):
    """Type of ship"""

    BULK_FREIGHTER = 'SHIP_BULK_FREIGHTER'
    COMMAND_FRIGATE = 'SHIP_COMMAND_FRIGATE'
    EXPLORER = 'SHIP_EXPLORER'
    HEAVY_FREIGHTER = 'SHIP_HEAVY_FREIGHTER'
    INTERCEPTOR = 'SHIP_INTERCEPTOR'
    LIGHT_HAULER = 'SHIP_LIGHT_HAULER'
    LIGHT_SHUTTLE = 'SHIP_LIGHT_SHUTTLE'
    MINING_DRONE = 'SHIP_MINING_DRONE'
    ORE_HOUND = 'SHIP_ORE_HOUND'
    PROBE = 'SHIP_PROBE'
    REFINING_FREIGHTER = 'SHIP_REFINING_FREIGHTER'
    SIPHON_DRONE = 'SHIP_SIPHON_DRONE'
    SURVEYOR = 'SHIP_SURVEYOR'

# spec_name: ShipyardTransaction
@dataclasses.dataclass
class ShipyardTransaction:
    """Results of a transaction with a shipyard."""

    #: The symbol of the waypoint.
    waypoint_symbol: str
    #: The symbol of the ship type (e.g. SHIP_MINING_DRONE) that was
    #: the subject of the transaction. Contrary to what the name
    #: implies, this is NOT the symbol of the ship that was purchased.
    ship_symbol: str
    #: The symbol of the ship type (e.g. SHIP_MINING_DRONE) that was
    #: the subject of the transaction.
    ship_type: str
    #: The price of the transaction.
    price: int
    #: The symbol of the agent that made the transaction.
    agent_symbol: str
    #: The timestamp of the transaction.
    timestamp: datetime

    def to_json(self) -> Json:
        v = {
            'waypointSymbol': to_json(self.waypoint_symbol),
            'shipSymbol': to_json(self.ship_symbol),
            'shipType': to_json(self.ship_type),
            'price': to_json(self.price),
            'agentSymbol': to_json(self.agent_symbol),
            'timestamp': to_json(self.timestamp),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            waypoint_symbol = from_json(str, v['waypointSymbol']),
            ship_symbol = from_json(str, v['shipSymbol']),
            ship_type = from_json(str, v['shipType']),
            price = from_json(int, v['price']),
            agent_symbol = from_json(str, v['agentSymbol']),
            timestamp = from_json(datetime, v['timestamp']),
        )

# spec_name: ShipyardShip
@dataclasses.dataclass
class ShipyardShip:
    """Ship details available at a shipyard."""

    # spec_name: ShipyardShip.crew
    @dataclasses.dataclass
    class Crew:
        __doc__ = ' '

        #: The minimum number of crew members required to maintain the
        #: ship.
        required: int
        #: The maximum number of crew members the ship can support.
        capacity: int

        def to_json(self) -> Json:
            v = {
                'required': to_json(self.required),
                'capacity': to_json(self.capacity),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                required = from_json(int, v['required']),
                capacity = from_json(int, v['capacity']),
            )

    #: Type of ship
    type: ShipType
    #: Name of the ship.
    name: str
    #: Description of the ship.
    description: str
    #: The supply level of a trade good.
    supply: SupplyLevel
    #: The purchase price of the ship.
    purchase_price: int
    #: The frame of the ship. The frame determines the number of
    #: modules and mounting points of the ship, as well as base fuel
    #: capacity. As the condition of the frame takes more wear, the
    #: ship will become more sluggish and less maneuverable.
    frame: ShipFrame
    #: The reactor of the ship. The reactor is responsible for
    #: powering the ship's systems and weapons.
    reactor: ShipReactor
    #: The engine determines how quickly a ship travels between
    #: waypoints.
    engine: ShipEngine
    #: Modules installed in this ship.
    modules: list[ShipModule]
    #: Mounts installed in this ship.
    mounts: list[ShipMount]
    crew: ShipyardShip.Crew
    #: The activity level of a trade good. If the good is an import,
    #: this represents how strong consumption is. If the good is an
    #: export, this represents how strong the production is for the
    #: good. When activity is strong, consumption or production is
    #: near maximum capacity. When activity is weak, consumption or
    #: production is near minimum capacity.
    activity: ActivityLevel | None = None

    def to_json(self) -> Json:
        v = {
            'type': to_json(self.type),
            'name': to_json(self.name),
            'description': to_json(self.description),
            'supply': to_json(self.supply),
            'purchasePrice': to_json(self.purchase_price),
            'frame': to_json(self.frame),
            'reactor': to_json(self.reactor),
            'engine': to_json(self.engine),
            'modules': to_json(self.modules),
            'mounts': to_json(self.mounts),
            'crew': to_json(self.crew),
        }
        if self.activity is not None:
            v['activity'] = to_json(self.activity)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            type = from_json(ShipType, v['type']),
            name = from_json(str, v['name']),
            description = from_json(str, v['description']),
            supply = from_json(SupplyLevel, v['supply']),
            purchase_price = from_json(int, v['purchasePrice']),
            frame = from_json(ShipFrame, v['frame']),
            reactor = from_json(ShipReactor, v['reactor']),
            engine = from_json(ShipEngine, v['engine']),
            modules = from_json(list[ShipModule], v['modules']),
            mounts = from_json(list[ShipMount], v['mounts']),
            crew = from_json(ShipyardShip.Crew, v['crew']),
            activity = from_json(ActivityLevel, v['activity']) if 'activity' in v else None,
        )

# spec_name: ShipFrame
@dataclasses.dataclass
class ShipFrame:
    """The frame of the ship. The frame determines the number of
    modules and mounting points of the ship, as well as base fuel
    capacity. As the condition of the frame takes more wear, the ship
    will become more sluggish and less maneuverable.
    """

    # spec_name: ShipFrame.symbol
    class Symbol(Enum):
        """Symbol of the frame."""

        BULK_FREIGHTER = 'FRAME_BULK_FREIGHTER'
        CARRIER = 'FRAME_CARRIER'
        CRUISER = 'FRAME_CRUISER'
        DESTROYER = 'FRAME_DESTROYER'
        DRONE = 'FRAME_DRONE'
        EXPLORER = 'FRAME_EXPLORER'
        FIGHTER = 'FRAME_FIGHTER'
        FRIGATE = 'FRAME_FRIGATE'
        HEAVY_FREIGHTER = 'FRAME_HEAVY_FREIGHTER'
        INTERCEPTOR = 'FRAME_INTERCEPTOR'
        LIGHT_FREIGHTER = 'FRAME_LIGHT_FREIGHTER'
        MINER = 'FRAME_MINER'
        PROBE = 'FRAME_PROBE'
        RACER = 'FRAME_RACER'
        SHUTTLE = 'FRAME_SHUTTLE'
        TRANSPORT = 'FRAME_TRANSPORT'

    #: Symbol of the frame.
    symbol: ShipFrame.Symbol
    #: Name of the frame.
    name: str
    #: The repairable condition of a component. A value of 0 indicates
    #: the component needs significant repairs, while a value of 1
    #: indicates the component is in near perfect condition. As the
    #: condition of a component is repaired, the overall integrity of
    #: the component decreases.
    condition: float
    #: The overall integrity of the component, which determines the
    #: performance of the component. A value of 0 indicates that the
    #: component is almost completely degraded, while a value of 1
    #: indicates that the component is in near perfect condition. The
    #: integrity of the component is non-repairable, and represents
    #: permanent wear over time.
    integrity: float
    #: Description of the frame.
    description: str
    #: The amount of slots that can be dedicated to modules installed
    #: in the ship. Each installed module take up a number of slots,
    #: and once there are no more slots, no new modules can be
    #: installed.
    module_slots: int
    #: The amount of slots that can be dedicated to mounts installed
    #: in the ship. Each installed mount takes up a number of points,
    #: and once there are no more points remaining, no new mounts can
    #: be installed.
    mounting_points: int
    #: The maximum amount of fuel that can be stored in this ship.
    #: When refueling, the ship will be refueled to this amount.
    fuel_capacity: int
    #: The requirements for installation on a ship
    requirements: ShipRequirements
    #: The overall quality of the component, which determines the
    #: quality of the component. High quality components return more
    #: ships parts and ship plating when a ship is scrapped. But also
    #: require more of these parts to repair. This is transparent to
    #: the player, as the parts are bought from/sold to the
    #: marketplace.
    quality: float

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'name': to_json(self.name),
            'condition': to_json(self.condition),
            'integrity': to_json(self.integrity),
            'description': to_json(self.description),
            'moduleSlots': to_json(self.module_slots),
            'mountingPoints': to_json(self.mounting_points),
            'fuelCapacity': to_json(self.fuel_capacity),
            'requirements': to_json(self.requirements),
            'quality': to_json(self.quality),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(ShipFrame.Symbol, v['symbol']),
            name = from_json(str, v['name']),
            condition = from_json(float, v['condition']),
            integrity = from_json(float, v['integrity']),
            description = from_json(str, v['description']),
            module_slots = from_json(int, v['moduleSlots']),
            mounting_points = from_json(int, v['mountingPoints']),
            fuel_capacity = from_json(int, v['fuelCapacity']),
            requirements = from_json(ShipRequirements, v['requirements']),
            quality = from_json(float, v['quality']),
        )

# spec_name: ShipRequirements
@dataclasses.dataclass
class ShipRequirements:
    """The requirements for installation on a ship"""

    #: The amount of power required from the reactor.
    power: int | None = None
    #: The number of crew required for operation.
    crew: int | None = None
    #: The number of module slots required for installation.
    slots: int | None = None

    def to_json(self) -> Json:
        v = {
        }
        if self.power is not None:
            v['power'] = to_json(self.power)
        if self.crew is not None:
            v['crew'] = to_json(self.crew)
        if self.slots is not None:
            v['slots'] = to_json(self.slots)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            power = from_json(int, v['power']) if 'power' in v else None,
            crew = from_json(int, v['crew']) if 'crew' in v else None,
            slots = from_json(int, v['slots']) if 'slots' in v else None,
        )

# spec_name: ShipReactor
@dataclasses.dataclass
class ShipReactor:
    """The reactor of the ship. The reactor is responsible for
    powering the ship's systems and weapons.
    """

    # spec_name: ShipReactor.symbol
    class Symbol(Enum):
        """Symbol of the reactor."""

        ANTIMATTER_I = 'REACTOR_ANTIMATTER_I'
        CHEMICAL_I = 'REACTOR_CHEMICAL_I'
        FISSION_I = 'REACTOR_FISSION_I'
        FUSION_I = 'REACTOR_FUSION_I'
        SOLAR_I = 'REACTOR_SOLAR_I'

    #: Symbol of the reactor.
    symbol: ShipReactor.Symbol
    #: Name of the reactor.
    name: str
    #: The repairable condition of a component. A value of 0 indicates
    #: the component needs significant repairs, while a value of 1
    #: indicates the component is in near perfect condition. As the
    #: condition of a component is repaired, the overall integrity of
    #: the component decreases.
    condition: float
    #: The overall integrity of the component, which determines the
    #: performance of the component. A value of 0 indicates that the
    #: component is almost completely degraded, while a value of 1
    #: indicates that the component is in near perfect condition. The
    #: integrity of the component is non-repairable, and represents
    #: permanent wear over time.
    integrity: float
    #: Description of the reactor.
    description: str
    #: The amount of power provided by this reactor. The more power a
    #: reactor provides to the ship, the lower the cooldown it gets
    #: when using a module or mount that taxes the ship's power.
    power_output: int
    #: The requirements for installation on a ship
    requirements: ShipRequirements
    #: The overall quality of the component, which determines the
    #: quality of the component. High quality components return more
    #: ships parts and ship plating when a ship is scrapped. But also
    #: require more of these parts to repair. This is transparent to
    #: the player, as the parts are bought from/sold to the
    #: marketplace.
    quality: float

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'name': to_json(self.name),
            'condition': to_json(self.condition),
            'integrity': to_json(self.integrity),
            'description': to_json(self.description),
            'powerOutput': to_json(self.power_output),
            'requirements': to_json(self.requirements),
            'quality': to_json(self.quality),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(ShipReactor.Symbol, v['symbol']),
            name = from_json(str, v['name']),
            condition = from_json(float, v['condition']),
            integrity = from_json(float, v['integrity']),
            description = from_json(str, v['description']),
            power_output = from_json(int, v['powerOutput']),
            requirements = from_json(ShipRequirements, v['requirements']),
            quality = from_json(float, v['quality']),
        )

# spec_name: ShipEngine
@dataclasses.dataclass
class ShipEngine:
    """The engine determines how quickly a ship travels between
    waypoints.
    """

    # spec_name: ShipEngine.symbol
    class Symbol(Enum):
        """The symbol of the engine."""

        HYPER_DRIVE_I = 'ENGINE_HYPER_DRIVE_I'
        IMPULSE_DRIVE_I = 'ENGINE_IMPULSE_DRIVE_I'
        ION_DRIVE_I = 'ENGINE_ION_DRIVE_I'
        ION_DRIVE_II = 'ENGINE_ION_DRIVE_II'

    #: The symbol of the engine.
    symbol: ShipEngine.Symbol
    #: The name of the engine.
    name: str
    #: The repairable condition of a component. A value of 0 indicates
    #: the component needs significant repairs, while a value of 1
    #: indicates the component is in near perfect condition. As the
    #: condition of a component is repaired, the overall integrity of
    #: the component decreases.
    condition: float
    #: The overall integrity of the component, which determines the
    #: performance of the component. A value of 0 indicates that the
    #: component is almost completely degraded, while a value of 1
    #: indicates that the component is in near perfect condition. The
    #: integrity of the component is non-repairable, and represents
    #: permanent wear over time.
    integrity: float
    #: The description of the engine.
    description: str
    #: The speed stat of this engine. The higher the speed, the faster
    #: a ship can travel from one point to another. Reduces the time
    #: of arrival when navigating the ship.
    speed: int
    #: The requirements for installation on a ship
    requirements: ShipRequirements
    #: The overall quality of the component, which determines the
    #: quality of the component. High quality components return more
    #: ships parts and ship plating when a ship is scrapped. But also
    #: require more of these parts to repair. This is transparent to
    #: the player, as the parts are bought from/sold to the
    #: marketplace.
    quality: float

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'name': to_json(self.name),
            'condition': to_json(self.condition),
            'integrity': to_json(self.integrity),
            'description': to_json(self.description),
            'speed': to_json(self.speed),
            'requirements': to_json(self.requirements),
            'quality': to_json(self.quality),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(ShipEngine.Symbol, v['symbol']),
            name = from_json(str, v['name']),
            condition = from_json(float, v['condition']),
            integrity = from_json(float, v['integrity']),
            description = from_json(str, v['description']),
            speed = from_json(int, v['speed']),
            requirements = from_json(ShipRequirements, v['requirements']),
            quality = from_json(float, v['quality']),
        )

# spec_name: ShipModule
@dataclasses.dataclass
class ShipModule:
    """A module can be installed in a ship and provides a set of
    capabilities such as storage space or quarters for crew. Module
    installations are permanent.
    """

    # spec_name: ShipModule.symbol
    class Symbol(Enum):
        """The symbol of the module."""

        CARGO_HOLD_I = 'MODULE_CARGO_HOLD_I'
        CARGO_HOLD_II = 'MODULE_CARGO_HOLD_II'
        CARGO_HOLD_III = 'MODULE_CARGO_HOLD_III'
        CREW_QUARTERS_I = 'MODULE_CREW_QUARTERS_I'
        ENVOY_QUARTERS_I = 'MODULE_ENVOY_QUARTERS_I'
        FUEL_REFINERY_I = 'MODULE_FUEL_REFINERY_I'
        GAS_PROCESSOR_I = 'MODULE_GAS_PROCESSOR_I'
        JUMP_DRIVE_I = 'MODULE_JUMP_DRIVE_I'
        JUMP_DRIVE_II = 'MODULE_JUMP_DRIVE_II'
        JUMP_DRIVE_III = 'MODULE_JUMP_DRIVE_III'
        MICRO_REFINERY_I = 'MODULE_MICRO_REFINERY_I'
        MINERAL_PROCESSOR_I = 'MODULE_MINERAL_PROCESSOR_I'
        ORE_REFINERY_I = 'MODULE_ORE_REFINERY_I'
        PASSENGER_CABIN_I = 'MODULE_PASSENGER_CABIN_I'
        SCIENCE_LAB_I = 'MODULE_SCIENCE_LAB_I'
        SHIELD_GENERATOR_I = 'MODULE_SHIELD_GENERATOR_I'
        SHIELD_GENERATOR_II = 'MODULE_SHIELD_GENERATOR_II'
        WARP_DRIVE_I = 'MODULE_WARP_DRIVE_I'
        WARP_DRIVE_II = 'MODULE_WARP_DRIVE_II'
        WARP_DRIVE_III = 'MODULE_WARP_DRIVE_III'

    #: The symbol of the module.
    symbol: ShipModule.Symbol
    #: Name of this module.
    name: str
    #: Description of this module.
    description: str
    #: The requirements for installation on a ship
    requirements: ShipRequirements
    #: Modules that provide capacity, such as cargo hold or crew
    #: quarters will show this value to denote how much of a bonus the
    #: module grants.
    capacity: int | None = None
    #: Modules that have a range will such as a sensor array show this
    #: value to denote how far can the module reach with its
    #: capabilities.
    range: int | None = None

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'name': to_json(self.name),
            'description': to_json(self.description),
            'requirements': to_json(self.requirements),
        }
        if self.capacity is not None:
            v['capacity'] = to_json(self.capacity)
        if self.range is not None:
            v['range'] = to_json(self.range)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(ShipModule.Symbol, v['symbol']),
            name = from_json(str, v['name']),
            description = from_json(str, v['description']),
            requirements = from_json(ShipRequirements, v['requirements']),
            capacity = from_json(int, v['capacity']) if 'capacity' in v else None,
            range = from_json(int, v['range']) if 'range' in v else None,
        )

# spec_name: ShipMount
@dataclasses.dataclass
class ShipMount:
    """A mount is installed on the exterier of a ship."""

    # spec_name: ShipMount.symbol
    class Symbol(Enum):
        """Symbol of this mount."""

        GAS_SIPHON_I = 'MOUNT_GAS_SIPHON_I'
        GAS_SIPHON_II = 'MOUNT_GAS_SIPHON_II'
        GAS_SIPHON_III = 'MOUNT_GAS_SIPHON_III'
        LASER_CANNON_I = 'MOUNT_LASER_CANNON_I'
        MINING_LASER_I = 'MOUNT_MINING_LASER_I'
        MINING_LASER_II = 'MOUNT_MINING_LASER_II'
        MINING_LASER_III = 'MOUNT_MINING_LASER_III'
        MISSILE_LAUNCHER_I = 'MOUNT_MISSILE_LAUNCHER_I'
        SENSOR_ARRAY_I = 'MOUNT_SENSOR_ARRAY_I'
        SENSOR_ARRAY_II = 'MOUNT_SENSOR_ARRAY_II'
        SENSOR_ARRAY_III = 'MOUNT_SENSOR_ARRAY_III'
        SURVEYOR_I = 'MOUNT_SURVEYOR_I'
        SURVEYOR_II = 'MOUNT_SURVEYOR_II'
        SURVEYOR_III = 'MOUNT_SURVEYOR_III'
        TURRET_I = 'MOUNT_TURRET_I'

    # spec_name: ShipMount.deposits
    class Deposit(Enum):
        ALUMINUM_ORE = 'ALUMINUM_ORE'
        AMMONIA_ICE = 'AMMONIA_ICE'
        COPPER_ORE = 'COPPER_ORE'
        DIAMONDS = 'DIAMONDS'
        GOLD_ORE = 'GOLD_ORE'
        ICE_WATER = 'ICE_WATER'
        IRON_ORE = 'IRON_ORE'
        MERITIUM_ORE = 'MERITIUM_ORE'
        PLATINUM_ORE = 'PLATINUM_ORE'
        PRECIOUS_STONES = 'PRECIOUS_STONES'
        QUARTZ_SAND = 'QUARTZ_SAND'
        SILICON_CRYSTALS = 'SILICON_CRYSTALS'
        SILVER_ORE = 'SILVER_ORE'
        URANITE_ORE = 'URANITE_ORE'

    #: Symbol of this mount.
    symbol: ShipMount.Symbol
    #: Name of this mount.
    name: str
    #: Description of this mount.
    description: str
    #: The requirements for installation on a ship
    requirements: ShipRequirements
    #: Mounts that have this value, such as mining lasers, denote how
    #: powerful this mount's capabilities are.
    strength: int | None = None
    #: Mounts that have this value denote what goods can be produced
    #: from using the mount.
    deposits: list[ShipMount.Deposit] | None = None

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'name': to_json(self.name),
            'description': to_json(self.description),
            'requirements': to_json(self.requirements),
        }
        if self.strength is not None:
            v['strength'] = to_json(self.strength)
        if self.deposits is not None:
            v['deposits'] = to_json(self.deposits)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(ShipMount.Symbol, v['symbol']),
            name = from_json(str, v['name']),
            description = from_json(str, v['description']),
            requirements = from_json(ShipRequirements, v['requirements']),
            strength = from_json(int, v['strength']) if 'strength' in v else None,
            deposits = from_json(list[ShipMount.Deposit], v['deposits']) if 'deposits' in v else None,
        )

class ContractLike(typing.Protocol):
    """This abstract class represents all objects that
    unambiguously refer to a single :class:`.Contract`. Any type that
    has the ``contract_id`` attribute is accepted as a valid
    ``ContractLike``.
    """

    @property
    def contract_id(self) -> str: ...

# spec_name: Contract
@dataclasses.dataclass(eq=False)
class Contract(Keyed):
    """Contract details."""

    _class_key: typing.ClassVar[str] = 'contract_id'

    # spec_name: Contract.type
    class Type(Enum):
        """Type of contract."""

        PROCUREMENT = 'PROCUREMENT'
        SHUTTLE = 'SHUTTLE'
        TRANSPORT = 'TRANSPORT'

    #: ID of the contract.
    id: str
    #: The symbol of the faction that this contract is for.
    faction_symbol: FactionSymbol
    #: Type of contract.
    type: Contract.Type
    #: The terms to fulfill the contract.
    terms: ContractTerms
    #: Whether the contract has been accepted by the agent
    accepted: bool
    #: Whether the contract has been fulfilled
    fulfilled: bool
    #: Deprecated in favor of deadlineToAccept
    expiration: datetime
    #: The time at which the contract is no longer available to be
    #: accepted
    deadline_to_accept: datetime | None = None

    def to_json(self) -> Json:
        v = {
            'id': to_json(self.id),
            'factionSymbol': to_json(self.faction_symbol),
            'type': to_json(self.type),
            'terms': to_json(self.terms),
            'accepted': to_json(self.accepted),
            'fulfilled': to_json(self.fulfilled),
            'expiration': to_json(self.expiration),
        }
        if self.deadline_to_accept is not None:
            v['deadlineToAccept'] = to_json(self.deadline_to_accept)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            id = from_json(str, v['id']),
            faction_symbol = from_json(FactionSymbol, v['factionSymbol']),
            type = from_json(Contract.Type, v['type']),
            terms = from_json(ContractTerms, v['terms']),
            accepted = from_json(bool, v['accepted']),
            fulfilled = from_json(bool, v['fulfilled']),
            expiration = from_json(datetime, v['expiration']),
            deadline_to_accept = from_json(datetime, v['deadlineToAccept']) if 'deadlineToAccept' in v else None,
        )

    @property
    def contract_id(self) -> str:
        """Alias for ``self.id``."""

        return self.id

# spec_name: ContractTerms
@dataclasses.dataclass
class ContractTerms:
    """The terms to fulfill the contract."""

    #: The deadline for the contract.
    deadline: datetime
    #: Payments for the contract.
    payment: ContractPayment
    #: The cargo that needs to be delivered to fulfill the contract.
    deliver: list[ContractDeliverGood] | None = None

    def to_json(self) -> Json:
        v = {
            'deadline': to_json(self.deadline),
            'payment': to_json(self.payment),
        }
        if self.deliver is not None:
            v['deliver'] = to_json(self.deliver)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            deadline = from_json(datetime, v['deadline']),
            payment = from_json(ContractPayment, v['payment']),
            deliver = from_json(list[ContractDeliverGood], v['deliver']) if 'deliver' in v else None,
        )

# spec_name: ContractPayment
@dataclasses.dataclass
class ContractPayment:
    """Payments for the contract."""

    #: The amount of credits received up front for accepting the
    #: contract.
    on_accepted: int
    #: The amount of credits received when the contract is fulfilled.
    on_fulfilled: int

    def to_json(self) -> Json:
        v = {
            'onAccepted': to_json(self.on_accepted),
            'onFulfilled': to_json(self.on_fulfilled),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            on_accepted = from_json(int, v['onAccepted']),
            on_fulfilled = from_json(int, v['onFulfilled']),
        )

# spec_name: ContractDeliverGood
@dataclasses.dataclass
class ContractDeliverGood:
    """The details of a delivery contract. Includes the type of
    good, units needed, and the destination.
    """

    #: The symbol of the trade good to deliver.
    trade_symbol: TradeSymbol
    #: The destination where goods need to be delivered.
    destination_symbol: str
    #: The number of units that need to be delivered on this contract.
    units_required: int
    #: The number of units fulfilled on this contract.
    units_fulfilled: int

    def to_json(self) -> Json:
        v = {
            'tradeSymbol': to_json(self.trade_symbol),
            'destinationSymbol': to_json(self.destination_symbol),
            'unitsRequired': to_json(self.units_required),
            'unitsFulfilled': to_json(self.units_fulfilled),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            trade_symbol = from_json(TradeSymbol, v['tradeSymbol']),
            destination_symbol = from_json(str, v['destinationSymbol']),
            units_required = from_json(int, v['unitsRequired']),
            units_fulfilled = from_json(int, v['unitsFulfilled']),
        )

class AgentLike(typing.Protocol):
    """This abstract class represents all objects that
    unambiguously refer to a single :class:`.Agent`. Any type that has
    the ``agent_symbol`` attribute is accepted as a valid
    ``AgentLike``.
    """

    @property
    def agent_symbol(self) -> str: ...

# spec_name: Agent
@dataclasses.dataclass(eq=False)
class Agent(Keyed):
    """Agent details."""

    _class_key: typing.ClassVar[str] = 'agent_symbol'

    #: Account ID that is tied to this agent. Only included on your
    #: own agent.
    account_id: str
    #: Symbol of the agent.
    symbol: str
    #: The headquarters of the agent.
    headquarters: str
    #: The number of credits the agent has available. Credits can be
    #: negative if funds have been overdrawn.
    credits: int
    #: The faction the agent started with.
    starting_faction: FactionSymbol
    #: How many ships are owned by the agent.
    ship_count: int

    def to_json(self) -> Json:
        v = {
            'accountId': to_json(self.account_id),
            'symbol': to_json(self.symbol),
            'headquarters': to_json(self.headquarters),
            'credits': to_json(self.credits),
            'startingFaction': to_json(self.starting_faction),
            'shipCount': to_json(self.ship_count),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            account_id = from_json(str, v['accountId']),
            symbol = from_json(str, v['symbol']),
            headquarters = from_json(str, v['headquarters']),
            credits = from_json(int, v['credits']),
            starting_faction = from_json(FactionSymbol, v['startingFaction']),
            ship_count = from_json(int, v['shipCount']),
        )

    @property
    def agent_symbol(self) -> str:
        """Alias for ``self.symbol``."""

        return self.symbol

# spec_name: AgentEvent
@dataclasses.dataclass
class AgentEvent:
    """Agent event details."""

    id: str
    type: str
    message: str
    created_at: datetime
    data: Json | None = None

    def to_json(self) -> Json:
        v = {
            'id': to_json(self.id),
            'type': to_json(self.type),
            'message': to_json(self.message),
            'createdAt': to_json(self.created_at),
        }
        if self.data is not None:
            v['data'] = to_json(self.data)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            id = from_json(str, v['id']),
            type = from_json(str, v['type']),
            message = from_json(str, v['message']),
            created_at = from_json(datetime, v['createdAt']),
            data = v['data'] if 'data' in v else None,
        )

class ShipLike(typing.Protocol):
    """This abstract class represents all objects that
    unambiguously refer to a single :class:`.Ship`. Any type that has
    the ``ship_symbol`` attribute is accepted as a valid ``ShipLike``.
    """

    @property
    def ship_symbol(self) -> str: ...

# spec_name: Ship
@dataclasses.dataclass(eq=False)
class Ship(Keyed):
    """Ship details."""

    _class_key: typing.ClassVar[str] = 'ship_symbol'

    #: The globally unique identifier of the ship in the following
    #: format: ``[AGENT_SYMBOL]-[HEX_ID]``
    symbol: str
    #: The public registration information of the ship
    registration: ShipRegistration
    #: The navigation information of the ship.
    nav: ShipNav
    #: The ship's crew service and maintain the ship's systems and
    #: equipment.
    crew: ShipCrew
    #: The frame of the ship. The frame determines the number of
    #: modules and mounting points of the ship, as well as base fuel
    #: capacity. As the condition of the frame takes more wear, the
    #: ship will become more sluggish and less maneuverable.
    frame: ShipFrame
    #: The reactor of the ship. The reactor is responsible for
    #: powering the ship's systems and weapons.
    reactor: ShipReactor
    #: The engine determines how quickly a ship travels between
    #: waypoints.
    engine: ShipEngine
    #: Modules installed in this ship.
    modules: list[ShipModule]
    #: Mounts installed in this ship.
    mounts: list[ShipMount]
    #: Ship cargo details.
    cargo: ShipCargo
    #: Details of the ship's fuel tanks including how much fuel was
    #: consumed during the last transit or action.
    fuel: ShipFuel
    #: A cooldown is a period of time in which a ship cannot perform
    #: certain actions.
    cooldown: Cooldown

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'registration': to_json(self.registration),
            'nav': to_json(self.nav),
            'crew': to_json(self.crew),
            'frame': to_json(self.frame),
            'reactor': to_json(self.reactor),
            'engine': to_json(self.engine),
            'modules': to_json(self.modules),
            'mounts': to_json(self.mounts),
            'cargo': to_json(self.cargo),
            'fuel': to_json(self.fuel),
            'cooldown': to_json(self.cooldown),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            registration = from_json(ShipRegistration, v['registration']),
            nav = from_json(ShipNav, v['nav']),
            crew = from_json(ShipCrew, v['crew']),
            frame = from_json(ShipFrame, v['frame']),
            reactor = from_json(ShipReactor, v['reactor']),
            engine = from_json(ShipEngine, v['engine']),
            modules = from_json(list[ShipModule], v['modules']),
            mounts = from_json(list[ShipMount], v['mounts']),
            cargo = from_json(ShipCargo, v['cargo']),
            fuel = from_json(ShipFuel, v['fuel']),
            cooldown = from_json(Cooldown, v['cooldown']),
        )

    @property
    def ship_symbol(self) -> str:
        """Alias for ``self.symbol``."""

        return self.symbol

# spec_name: ShipRegistration
@dataclasses.dataclass
class ShipRegistration:
    """The public registration information of the ship"""

    #: The agent's registered name of the ship
    name: str
    #: The symbol of the faction the ship is registered with
    faction_symbol: FactionSymbol
    #: The registered role of the ship
    role: ShipRole

    def to_json(self) -> Json:
        v = {
            'name': to_json(self.name),
            'factionSymbol': to_json(self.faction_symbol),
            'role': to_json(self.role),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            name = from_json(str, v['name']),
            faction_symbol = from_json(FactionSymbol, v['factionSymbol']),
            role = from_json(ShipRole, v['role']),
        )

# spec_name: ShipRole
class ShipRole(Enum):
    """The registered role of the ship"""

    CARRIER = 'CARRIER'
    COMMAND = 'COMMAND'
    EXCAVATOR = 'EXCAVATOR'
    EXPLORER = 'EXPLORER'
    FABRICATOR = 'FABRICATOR'
    HARVESTER = 'HARVESTER'
    HAULER = 'HAULER'
    INTERCEPTOR = 'INTERCEPTOR'
    PATROL = 'PATROL'
    REFINERY = 'REFINERY'
    REPAIR = 'REPAIR'
    SATELLITE = 'SATELLITE'
    SURVEYOR = 'SURVEYOR'
    TRANSPORT = 'TRANSPORT'

# spec_name: ShipNav
@dataclasses.dataclass
class ShipNav:
    """The navigation information of the ship."""

    #: The symbol of the system.
    system_symbol: str
    #: The symbol of the waypoint.
    waypoint_symbol: str
    #: The routing information for the ship's most recent transit or
    #: current location.
    route: ShipNavRoute
    #: The current status of the ship
    status: ShipStatus
    #: The ship's set speed when traveling between waypoints or
    #: systems.
    flight_mode: FlightMode

    def to_json(self) -> Json:
        v = {
            'systemSymbol': to_json(self.system_symbol),
            'waypointSymbol': to_json(self.waypoint_symbol),
            'route': to_json(self.route),
            'status': to_json(self.status),
            'flightMode': to_json(self.flight_mode),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            system_symbol = from_json(str, v['systemSymbol']),
            waypoint_symbol = from_json(str, v['waypointSymbol']),
            route = from_json(ShipNavRoute, v['route']),
            status = from_json(ShipStatus, v['status']),
            flight_mode = from_json(FlightMode, v['flightMode']),
        )

# spec_name: ShipNavRoute
@dataclasses.dataclass
class ShipNavRoute:
    """The routing information for the ship's most recent
    transit or current location.
    """

    #: The destination or departure of a ships nav route.
    destination: ShipNavRouteWaypoint
    #: The destination or departure of a ships nav route.
    origin: ShipNavRouteWaypoint
    #: The date time of the ship's departure.
    departure_time: datetime
    #: The date time of the ship's arrival. If the ship is in-transit,
    #: this is the expected time of arrival.
    arrival: datetime

    def to_json(self) -> Json:
        v = {
            'destination': to_json(self.destination),
            'origin': to_json(self.origin),
            'departureTime': to_json(self.departure_time),
            'arrival': to_json(self.arrival),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            destination = from_json(ShipNavRouteWaypoint, v['destination']),
            origin = from_json(ShipNavRouteWaypoint, v['origin']),
            departure_time = from_json(datetime, v['departureTime']),
            arrival = from_json(datetime, v['arrival']),
        )

# spec_name: ShipNavRouteWaypoint
@dataclasses.dataclass
class ShipNavRouteWaypoint:
    """The destination or departure of a ships nav route."""

    #: The symbol of the waypoint.
    symbol: str
    #: The type of waypoint.
    type: WaypointType
    #: The symbol of the system.
    system_symbol: str
    #: Position in the universe in the x axis.
    x: int
    #: Position in the universe in the y axis.
    y: int

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'type': to_json(self.type),
            'systemSymbol': to_json(self.system_symbol),
            'x': to_json(self.x),
            'y': to_json(self.y),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            type = from_json(WaypointType, v['type']),
            system_symbol = from_json(str, v['systemSymbol']),
            x = from_json(int, v['x']),
            y = from_json(int, v['y']),
        )

# spec_name: ShipNavStatus
class ShipStatus(Enum):
    """The current status of the ship"""

    DOCKED = 'DOCKED'
    IN_ORBIT = 'IN_ORBIT'
    IN_TRANSIT = 'IN_TRANSIT'

# spec_name: ShipNavFlightMode
class FlightMode(Enum):
    """The ship's set speed when traveling between waypoints or
    systems.
    """

    BURN = 'BURN'
    CRUISE = 'CRUISE'
    DRIFT = 'DRIFT'
    STEALTH = 'STEALTH'

# spec_name: ShipCrew
@dataclasses.dataclass
class ShipCrew:
    """The ship's crew service and maintain the ship's systems
    and equipment.
    """

    # spec_name: ShipCrew.rotation
    class Rotation(Enum):
        """The rotation of crew shifts. A stricter shift
        improves the ship's performance. A more relaxed shift improves
        the crew's morale.
        """

        RELAXED = 'RELAXED'
        STRICT = 'STRICT'

    #: The current number of crew members on the ship.
    current: int
    #: The minimum number of crew members required to maintain the
    #: ship.
    required: int
    #: The maximum number of crew members the ship can support.
    capacity: int
    #: The rotation of crew shifts. A stricter shift improves the
    #: ship's performance. A more relaxed shift improves the crew's
    #: morale.
    rotation: ShipCrew.Rotation
    #: A rough measure of the crew's morale. A higher morale means the
    #: crew is happier and more productive. A lower morale means the
    #: ship is more prone to accidents.
    morale: int
    #: The amount of credits per crew member paid per hour. Wages are
    #: paid when a ship docks at a civilized waypoint.
    wages: int

    def to_json(self) -> Json:
        v = {
            'current': to_json(self.current),
            'required': to_json(self.required),
            'capacity': to_json(self.capacity),
            'rotation': to_json(self.rotation),
            'morale': to_json(self.morale),
            'wages': to_json(self.wages),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            current = from_json(int, v['current']),
            required = from_json(int, v['required']),
            capacity = from_json(int, v['capacity']),
            rotation = from_json(ShipCrew.Rotation, v['rotation']),
            morale = from_json(int, v['morale']),
            wages = from_json(int, v['wages']),
        )

# spec_name: ShipFuel
@dataclasses.dataclass
class ShipFuel:
    """Details of the ship's fuel tanks including how much fuel
    was consumed during the last transit or action.
    """

    # spec_name: ShipFuel.consumed
    @dataclasses.dataclass
    class Consumed:
        """An object that only shows up when an action has
        consumed fuel in the process. Shows the fuel consumption data.
        """

        #: The amount of fuel consumed by the most recent transit or
        #: action.
        amount: int
        #: The time at which the fuel was consumed.
        timestamp: datetime

        def to_json(self) -> Json:
            v = {
                'amount': to_json(self.amount),
                'timestamp': to_json(self.timestamp),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                amount = from_json(int, v['amount']),
                timestamp = from_json(datetime, v['timestamp']),
            )

    #: The current amount of fuel in the ship's tanks.
    current: int
    #: The maximum amount of fuel the ship's tanks can hold.
    capacity: int
    #: An object that only shows up when an action has consumed fuel
    #: in the process. Shows the fuel consumption data.
    consumed: ShipFuel.Consumed | None = None

    def to_json(self) -> Json:
        v = {
            'current': to_json(self.current),
            'capacity': to_json(self.capacity),
        }
        if self.consumed is not None:
            v['consumed'] = to_json(self.consumed)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            current = from_json(int, v['current']),
            capacity = from_json(int, v['capacity']),
            consumed = from_json(ShipFuel.Consumed, v['consumed']) if 'consumed' in v else None,
        )

# spec_name: Cooldown
@dataclasses.dataclass
class Cooldown:
    """A cooldown is a period of time in which a ship cannot
    perform certain actions.
    """

    #: The symbol of the ship that is on cooldown
    ship_symbol: str
    #: The total duration of the cooldown in seconds
    total_seconds: int
    #: The remaining duration of the cooldown in seconds
    remaining_seconds: int
    #: The date and time when the cooldown expires in ISO 8601 format
    expiration: datetime | None = None

    def to_json(self) -> Json:
        v = {
            'shipSymbol': to_json(self.ship_symbol),
            'totalSeconds': to_json(self.total_seconds),
            'remainingSeconds': to_json(self.remaining_seconds),
        }
        if self.expiration is not None:
            v['expiration'] = to_json(self.expiration)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            ship_symbol = from_json(str, v['shipSymbol']),
            total_seconds = from_json(int, v['totalSeconds']),
            remaining_seconds = from_json(int, v['remainingSeconds']),
            expiration = from_json(datetime, v['expiration']) if 'expiration' in v else None,
        )

# spec_name: ChartTransaction
@dataclasses.dataclass
class ChartTransaction:
    """Result of a chart transaction."""

    #: The symbol of the waypoint.
    waypoint_symbol: str
    #: The symbol of the ship.
    ship_symbol: str
    #: The total price of the transaction.
    total_price: int
    #: The timestamp of the transaction.
    timestamp: datetime

    def to_json(self) -> Json:
        v = {
            'waypointSymbol': to_json(self.waypoint_symbol),
            'shipSymbol': to_json(self.ship_symbol),
            'totalPrice': to_json(self.total_price),
            'timestamp': to_json(self.timestamp),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            waypoint_symbol = from_json(str, v['waypointSymbol']),
            ship_symbol = from_json(str, v['shipSymbol']),
            total_price = from_json(int, v['totalPrice']),
            timestamp = from_json(datetime, v['timestamp']),
        )

# spec_name: Extraction
@dataclasses.dataclass
class Extraction:
    """Extraction details."""

    #: Symbol of the ship that executed the extraction.
    ship_symbol: str
    #: A yield from the extraction operation.
    yield_: ExtractionYield

    def to_json(self) -> Json:
        v = {
            'shipSymbol': to_json(self.ship_symbol),
            'yield': to_json(self.yield_),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            ship_symbol = from_json(str, v['shipSymbol']),
            yield_ = from_json(ExtractionYield, v['yield']),
        )

# spec_name: ExtractionYield
@dataclasses.dataclass
class ExtractionYield:
    """A yield from the extraction operation."""

    #: The good's symbol.
    symbol: TradeSymbol
    #: The number of units extracted that were placed into the ship's
    #: cargo hold.
    units: int

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'units': to_json(self.units),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(TradeSymbol, v['symbol']),
            units = from_json(int, v['units']),
        )

# spec_name: ShipConditionEvent
@dataclasses.dataclass
class ShipConditionEvent:
    """An event that represents damage or wear to a ship's
    reactor, frame, or engine, reducing the condition of the ship.
    """

    # spec_name: ShipConditionEvent.symbol
    class Symbol(Enum):
        """The symbol of the event that occurred."""

        ATMOSPHERIC_ENTRY_HEAT = 'ATMOSPHERIC_ENTRY_HEAT'
        BEARING_LUBRICATION_FADE = 'BEARING_LUBRICATION_FADE'
        COOLANT_LEAK = 'COOLANT_LEAK'
        COOLANT_SYSTEM_AGEING = 'COOLANT_SYSTEM_AGEING'
        CORROSIVE_MINERAL_CONTAMINATION = 'CORROSIVE_MINERAL_CONTAMINATION'
        DUST_MICROABRASIONS = 'DUST_MICROABRASIONS'
        ELECTROMAGNETIC_FIELD_INTERFERENCE = 'ELECTROMAGNETIC_FIELD_INTERFERENCE'
        ELECTROMAGNETIC_SURGE_EFFECTS = 'ELECTROMAGNETIC_SURGE_EFFECTS'
        ENERGY_SPIKE_FROM_MINERAL = 'ENERGY_SPIKE_FROM_MINERAL'
        EXHAUST_PORT_CLOGGING = 'EXHAUST_PORT_CLOGGING'
        FUEL_EFFICIENCY_DEGRADATION = 'FUEL_EFFICIENCY_DEGRADATION'
        HULL_MICROMETEORITE_DAMAGE = 'HULL_MICROMETEORITE_DAMAGE'
        HULL_MICROMETEORITE_STRIKES = 'HULL_MICROMETEORITE_STRIKES'
        IMPACT_WITH_EXTRACTED_DEBRIS = 'IMPACT_WITH_EXTRACTED_DEBRIS'
        MAGNETIC_FIELD_DISRUPTION = 'MAGNETIC_FIELD_DISRUPTION'
        POWER_DISTRIBUTION_FLUCTUATION = 'POWER_DISTRIBUTION_FLUCTUATION'
        PRESSURE_DIFFERENTIAL_STRESS = 'PRESSURE_DIFFERENTIAL_STRESS'
        REACTOR_OVERLOAD = 'REACTOR_OVERLOAD'
        SENSOR_CALIBRATION_DRIFT = 'SENSOR_CALIBRATION_DRIFT'
        SOLAR_FLARE_INTERFERENCE = 'SOLAR_FLARE_INTERFERENCE'
        SPACE_DEBRIS_COLLISION = 'SPACE_DEBRIS_COLLISION'
        STRUCTURAL_STRESS_FRACTURES = 'STRUCTURAL_STRESS_FRACTURES'
        THERMAL_EXPANSION_MISMATCH = 'THERMAL_EXPANSION_MISMATCH'
        THERMAL_STRESS = 'THERMAL_STRESS'
        THRUSTER_NOZZLE_WEAR = 'THRUSTER_NOZZLE_WEAR'
        VIBRATION_DAMAGE_FROM_DRILLING = 'VIBRATION_DAMAGE_FROM_DRILLING'
        VIBRATION_OVERLOAD = 'VIBRATION_OVERLOAD'

    # spec_name: ShipConditionEvent.component
    class Component(Enum):
        ENGINE = 'ENGINE'
        FRAME = 'FRAME'
        REACTOR = 'REACTOR'

    #: The symbol of the event that occurred.
    symbol: ShipConditionEvent.Symbol
    component: ShipConditionEvent.Component
    #: The name of the event.
    name: str
    #: A description of the event.
    description: str

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'component': to_json(self.component),
            'name': to_json(self.name),
            'description': to_json(self.description),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(ShipConditionEvent.Symbol, v['symbol']),
            component = from_json(ShipConditionEvent.Component, v['component']),
            name = from_json(str, v['name']),
            description = from_json(str, v['description']),
        )

# spec_name: Survey
@dataclasses.dataclass
class Survey:
    """A resource survey of a waypoint, detailing a specific
    extraction location and the types of resources that can be found
    there.
    """

    #: A unique signature for the location of this survey. This
    #: signature is verified when attempting an extraction using this
    #: survey.
    signature: str
    #: The symbol of the waypoint that this survey is for.
    symbol: str
    #: A list of deposits that can be found at this location. A ship
    #: will extract one of these deposits when using this survey in an
    #: extraction request. If multiple deposits of the same type are
    #: present, the chance of extracting that deposit is increased.
    deposits: list[SurveyDeposit]
    #: The date and time when the survey expires. After this date and
    #: time, the survey will no longer be available for extraction.
    expiration: datetime
    #: The size of the deposit. This value indicates how much can be
    #: extracted from the survey before it is exhausted.
    size: SurveySize

    def to_json(self) -> Json:
        v = {
            'signature': to_json(self.signature),
            'symbol': to_json(self.symbol),
            'deposits': to_json(self.deposits),
            'expiration': to_json(self.expiration),
            'size': to_json(self.size),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            signature = from_json(str, v['signature']),
            symbol = from_json(str, v['symbol']),
            deposits = from_json(list[SurveyDeposit], v['deposits']),
            expiration = from_json(datetime, v['expiration']),
            size = from_json(SurveySize, v['size']),
        )

# spec_name: SurveyDeposit
@dataclasses.dataclass
class SurveyDeposit:
    """A surveyed deposit of a mineral or resource available for
    extraction.
    """

    #: The good's symbol.
    symbol: TradeSymbol

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(TradeSymbol, v['symbol']),
        )

# spec_name: SurveySize
class SurveySize(Enum):
    """The size of the deposit. This value indicates how much
    can be extracted from the survey before it is exhausted.
    """

    LARGE = 'LARGE'
    MODERATE = 'MODERATE'
    SMALL = 'SMALL'

# spec_name: ScannedSystem
@dataclasses.dataclass
class ScannedSystem:
    """Details of a system was that scanned."""

    #: Symbol of the system.
    symbol: str
    #: Symbol of the system's sector.
    sector_symbol: str
    #: The type of system.
    type: SystemType
    #: Position in the universe in the x axis.
    x: int
    #: Position in the universe in the y axis.
    y: int
    #: The system's distance from the scanning ship.
    distance: int

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'sectorSymbol': to_json(self.sector_symbol),
            'type': to_json(self.type),
            'x': to_json(self.x),
            'y': to_json(self.y),
            'distance': to_json(self.distance),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            sector_symbol = from_json(str, v['sectorSymbol']),
            type = from_json(SystemType, v['type']),
            x = from_json(int, v['x']),
            y = from_json(int, v['y']),
            distance = from_json(int, v['distance']),
        )

# spec_name: ScannedWaypoint
@dataclasses.dataclass
class ScannedWaypoint:
    """A waypoint that was scanned by a ship."""

    #: The symbol of the waypoint.
    symbol: str
    #: The type of waypoint.
    type: WaypointType
    #: The symbol of the system.
    system_symbol: str
    #: Position in the universe in the x axis.
    x: int
    #: Position in the universe in the y axis.
    y: int
    #: List of waypoints that orbit this waypoint.
    orbitals: list[WaypointOrbital]
    #: The traits of the waypoint.
    traits: list[WaypointTraitInfo]
    #: The faction that controls the waypoint.
    faction: WaypointFaction | None = None
    #: The chart of a system or waypoint, which makes the location
    #: visible to other agents.
    chart: Chart | None = None

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'type': to_json(self.type),
            'systemSymbol': to_json(self.system_symbol),
            'x': to_json(self.x),
            'y': to_json(self.y),
            'orbitals': to_json(self.orbitals),
            'traits': to_json(self.traits),
        }
        if self.faction is not None:
            v['faction'] = to_json(self.faction)
        if self.chart is not None:
            v['chart'] = to_json(self.chart)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            type = from_json(WaypointType, v['type']),
            system_symbol = from_json(str, v['systemSymbol']),
            x = from_json(int, v['x']),
            y = from_json(int, v['y']),
            orbitals = from_json(list[WaypointOrbital], v['orbitals']),
            traits = from_json(list[WaypointTraitInfo], v['traits']),
            faction = from_json(WaypointFaction, v['faction']) if 'faction' in v else None,
            chart = from_json(Chart, v['chart']) if 'chart' in v else None,
        )

# spec_name: ScannedShip
@dataclasses.dataclass
class ScannedShip:
    """The ship that was scanned. Details include information
    about the ship that could be detected by the scanner.
    """

    # spec_name: ScannedShip.engine
    @dataclasses.dataclass
    class Engine:
        """The engine of the ship."""

        #: The symbol of the engine.
        symbol: str

        def to_json(self) -> Json:
            v = {
                'symbol': to_json(self.symbol),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                symbol = from_json(str, v['symbol']),
            )

    # spec_name: ScannedShip.frame
    @dataclasses.dataclass
    class Frame:
        """The frame of the ship."""

        #: The symbol of the frame.
        symbol: str

        def to_json(self) -> Json:
            v = {
                'symbol': to_json(self.symbol),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                symbol = from_json(str, v['symbol']),
            )

    # spec_name: ScannedShip.reactor
    @dataclasses.dataclass
    class Reactor:
        """The reactor of the ship."""

        #: The symbol of the reactor.
        symbol: str

        def to_json(self) -> Json:
            v = {
                'symbol': to_json(self.symbol),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                symbol = from_json(str, v['symbol']),
            )

    # spec_name: ScannedShip.mounts
    @dataclasses.dataclass
    class Mount:
        __doc__ = ' '

        #: The symbol of the mount.
        symbol: str

        def to_json(self) -> Json:
            v = {
                'symbol': to_json(self.symbol),
            }
            return v

        @classmethod
        def from_json(cls, v: Json) -> typing.Self:
            if not isinstance(v, dict):
                raise TypeError(type(v))
            return cls(
                symbol = from_json(str, v['symbol']),
            )

    #: The globally unique identifier of the ship.
    symbol: str
    #: The public registration information of the ship
    registration: ShipRegistration
    #: The navigation information of the ship.
    nav: ShipNav
    #: The engine of the ship.
    engine: ScannedShip.Engine
    #: The frame of the ship.
    frame: ScannedShip.Frame | None = None
    #: The reactor of the ship.
    reactor: ScannedShip.Reactor | None = None
    #: List of mounts installed in the ship.
    mounts: list[ScannedShip.Mount] | None = None

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'registration': to_json(self.registration),
            'nav': to_json(self.nav),
            'engine': to_json(self.engine),
        }
        if self.frame is not None:
            v['frame'] = to_json(self.frame)
        if self.reactor is not None:
            v['reactor'] = to_json(self.reactor)
        if self.mounts is not None:
            v['mounts'] = to_json(self.mounts)
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(str, v['symbol']),
            registration = from_json(ShipRegistration, v['registration']),
            nav = from_json(ShipNav, v['nav']),
            engine = from_json(ScannedShip.Engine, v['engine']),
            frame = from_json(ScannedShip.Frame, v['frame']) if 'frame' in v else None,
            reactor = from_json(ScannedShip.Reactor, v['reactor']) if 'reactor' in v else None,
            mounts = from_json(list[ScannedShip.Mount], v['mounts']) if 'mounts' in v else None,
        )

# spec_name: ScrapTransaction
@dataclasses.dataclass
class ScrapTransaction:
    """Result of a scrap transaction."""

    #: The symbol of the waypoint.
    waypoint_symbol: str
    #: The symbol of the ship.
    ship_symbol: str
    #: The total price of the transaction.
    total_price: int
    #: The timestamp of the transaction.
    timestamp: datetime

    def to_json(self) -> Json:
        v = {
            'waypointSymbol': to_json(self.waypoint_symbol),
            'shipSymbol': to_json(self.ship_symbol),
            'totalPrice': to_json(self.total_price),
            'timestamp': to_json(self.timestamp),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            waypoint_symbol = from_json(str, v['waypointSymbol']),
            ship_symbol = from_json(str, v['shipSymbol']),
            total_price = from_json(int, v['totalPrice']),
            timestamp = from_json(datetime, v['timestamp']),
        )

# spec_name: RepairTransaction
@dataclasses.dataclass
class RepairTransaction:
    """Result of a repair transaction."""

    #: The symbol of the waypoint.
    waypoint_symbol: str
    #: The symbol of the ship.
    ship_symbol: str
    #: The total price of the transaction.
    total_price: int
    #: The timestamp of the transaction.
    timestamp: datetime

    def to_json(self) -> Json:
        v = {
            'waypointSymbol': to_json(self.waypoint_symbol),
            'shipSymbol': to_json(self.ship_symbol),
            'totalPrice': to_json(self.total_price),
            'timestamp': to_json(self.timestamp),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            waypoint_symbol = from_json(str, v['waypointSymbol']),
            ship_symbol = from_json(str, v['shipSymbol']),
            total_price = from_json(int, v['totalPrice']),
            timestamp = from_json(datetime, v['timestamp']),
        )

# spec_name: Siphon
@dataclasses.dataclass
class Siphon:
    """Siphon details."""

    #: Symbol of the ship that executed the siphon.
    ship_symbol: str
    #: A yield from the siphon operation.
    yield_: SiphonYield

    def to_json(self) -> Json:
        v = {
            'shipSymbol': to_json(self.ship_symbol),
            'yield': to_json(self.yield_),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            ship_symbol = from_json(str, v['shipSymbol']),
            yield_ = from_json(SiphonYield, v['yield']),
        )

# spec_name: SiphonYield
@dataclasses.dataclass
class SiphonYield:
    """A yield from the siphon operation."""

    #: The good's symbol.
    symbol: TradeSymbol
    #: The number of units siphoned that were placed into the ship's
    #: cargo hold.
    units: int

    def to_json(self) -> Json:
        v = {
            'symbol': to_json(self.symbol),
            'units': to_json(self.units),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            symbol = from_json(TradeSymbol, v['symbol']),
            units = from_json(int, v['units']),
        )

# spec_name: ShipModificationTransaction
@dataclasses.dataclass
class ShipModificationTransaction:
    """Result of a transaction for a ship modification, such as
    installing a mount or a module.
    """

    #: The symbol of the waypoint where the transaction took place.
    waypoint_symbol: str
    #: The symbol of the ship that made the transaction.
    ship_symbol: str
    #: The symbol of the trade good.
    trade_symbol: TradeSymbol
    #: The total price of the transaction.
    total_price: int
    #: The timestamp of the transaction.
    timestamp: datetime

    def to_json(self) -> Json:
        v = {
            'waypointSymbol': to_json(self.waypoint_symbol),
            'shipSymbol': to_json(self.ship_symbol),
            'tradeSymbol': to_json(self.trade_symbol),
            'totalPrice': to_json(self.total_price),
            'timestamp': to_json(self.timestamp),
        }
        return v

    @classmethod
    def from_json(cls, v: Json) -> typing.Self:
        if not isinstance(v, dict):
            raise TypeError(type(v))
        return cls(
            waypoint_symbol = from_json(str, v['waypointSymbol']),
            ship_symbol = from_json(str, v['shipSymbol']),
            trade_symbol = from_json(TradeSymbol, v['tradeSymbol']),
            total_price = from_json(int, v['totalPrice']),
            timestamp = from_json(datetime, v['timestamp']),
        )

# spec_name: ship-refine.body.produce
class Produce(Enum):
    """The type of good to produce out of the refining process."""

    ALUMINUM = 'ALUMINUM'
    COPPER = 'COPPER'
    FUEL = 'FUEL'
    GOLD = 'GOLD'
    IRON = 'IRON'
    MERITIUM = 'MERITIUM'
    PLATINUM = 'PLATINUM'
    SILVER = 'SILVER'
    URANITE = 'URANITE'
