# !!! THIS FILE IS GENERATED BY generate.py
# !!! DO NOT EDIT THIS FILE DIRECTLY

"""SpaceTraders API v2.3.0

SpaceTraders is an open-universe game and learning platform that
offers a set of HTTP endpoints to control a fleet of ships and explore
a multiplayer universe.

The API is documented using `OpenAPI
<https://github.com/SpaceTradersAPI/api-docs>`_. You can send your
first request right here in your browser to check the status of the
game server.

.. code:: json

    {
      "method": "GET",
      "url": "https://api.spacetraders.io/v2",
    }

Unlike a traditional game, SpaceTraders does not have a first-party
client or app to play the game. Instead, you can use the API to build
your own client, write a script to automate your ships, or try an app
built by the community.

We have a `Discord channel <https://discord.com/invite/jh6zurdWk5>`_
where you can share your projects, ask questions, and get help from
other players.
"""

from __future__ import annotations

import spess._backend as backend
from spess._json import to_json
import spess.models as models
from spess._paged import Paged
import spess.responses as responses

__all__ = [
    'Client', 'Error', 'ParseError', 'ClientError', 'ServerError',
    'Paged',
]

Error = backend.Error
ParseError = backend.ParseError
ClientError = backend.ClientError
ServerError = backend.ServerError

class Client(backend.Backend):
    SERVER_URL = 'https://api.spacetraders.io/v2'

    #
    # Accounts
    #

    # spec_name: get-my-account
    def my_account(self) -> responses.MyAccount:
        """Fetch your account details."""

        return self._call(
            responses.MyAccount,
            'get',
            '/my/account',
        )

    # spec_name: register
    def register(self, symbol: str, faction: models.FactionSymbol) -> responses.Register:
        """Creates a new agent and ties it to an account.
        The agent symbol must consist of a 3-14 character string, and
        will be used to represent your agent. This symbol will prefix
        the symbol of every ship you own. Agent symbols will be cast
        to all uppercase characters.

        This new agent will be tied to a starting faction of your
        choice, which determines your starting location, and will be
        granted an authorization token, a contract with their starting
        faction, a command ship that can fly across space with
        advanced capabilities, a small probe ship that can be used for
        reconnaissance, and 175,000 credits.

            Keep your token safe and secure
            -------------------------------

            Keep careful track of where you store your token. You can
            generate a new token from our account dashboard, but if
            someone else gains access to your token they will be able
            to use it to make API requests on your behalf until the
            end of the reset.

        If you are new to SpaceTraders, It is recommended to register
        with the COSMIC faction, a faction that is well connected to
        the rest of the universe. After registering, you should try
        our interactive `quickstart guide
        <https://docs.spacetraders.io/quickstart/new-game>`_ which
        will walk you through a few basic API requests in just a few
        minutes.
        """

        return self._call(
            responses.Register,
            'post',
            '/register',
            body = {
                'symbol': to_json(symbol),
                'faction': to_json(faction),
            },
        )

    #
    # Agents
    #

    # spec_name: get-agents
    def agents(self) -> Paged[models.PublicAgent]:
        """List all public agent details."""

        return self._call_paginated(
            models.PublicAgent,
            'get',
            '/agents',
        )

    # spec_name: get-agent
    def agent(self, agent: str | models.AgentLike) -> models.PublicAgent:
        """Get public details for a specific agent."""

        agent = self._resolve(models.Agent, agent)

        return self._call(
            models.PublicAgent,
            'get',
            '/agents/{agentSymbol:s}',
            path_args = {
                'agentSymbol': agent,
            },
        )

    # spec_name: get-my-agent
    def my_agent(self) -> models.Agent:
        """Fetch your agent's details."""

        return self._call(
            models.Agent,
            'get',
            '/my/agent',
        )

    # spec_name: get-my-agent-events
    def my_agent_events(self) -> list[models.AgentEvent]:
        """Get recent events for your agent."""

        return self._call(
            list[models.AgentEvent],
            'get',
            '/my/agent/events',
        )

    #
    # Contracts
    #

    # spec_name: get-contracts
    def contracts(self) -> Paged[models.Contract]:
        """Return a paginated list of all your contracts."""

        return self._call_paginated(
            models.Contract,
            'get',
            '/my/contracts',
        )

    # spec_name: get-contract
    def contract(self, contract: str | models.ContractLike) -> models.Contract:
        """Get the details of a specific contract."""

        contract = self._resolve(models.Contract, contract)

        return self._call(
            models.Contract,
            'get',
            '/my/contracts/{contractId:s}',
            path_args = {
                'contractId': contract,
            },
        )

    # spec_name: accept-contract
    def accept_contract(self, contract: str | models.ContractLike) -> responses.AcceptContract:
        """Accept a contract by ID.

        You can only accept contracts that were offered to you, were
        not accepted yet, and whose deadlines has not passed yet.
        """

        contract = self._resolve(models.Contract, contract)

        return self._call(
            responses.AcceptContract,
            'post',
            '/my/contracts/{contractId:s}/accept',
            path_args = {
                'contractId': contract,
            },
        )

    # spec_name: fulfill-contract
    def fulfill_contract(self, contract: str | models.ContractLike) -> responses.FulfillContract:
        """Fulfill a contract. Can only be used on contracts
        that have all of their delivery terms fulfilled.
        """

        contract = self._resolve(models.Contract, contract)

        return self._call(
            responses.FulfillContract,
            'post',
            '/my/contracts/{contractId:s}/fulfill',
            path_args = {
                'contractId': contract,
            },
        )

    # spec_name: deliver-contract
    def deliver_contract(self, contract: str | models.ContractLike, ship: str | models.ShipLike, trade_symbol: str, units: int) -> responses.DeliverContract:
        """Deliver cargo to a contract.

        In order to use this API, a ship must be at the delivery
        location (denoted in the delivery terms as
        ``destinationSymbol`` of a contract) and must have a number of
        units of a good required by this contract in its cargo.

        Cargo that was delivered will be removed from the ship's
        cargo.
        """

        contract = self._resolve(models.Contract, contract)
        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.DeliverContract,
            'post',
            '/my/contracts/{contractId:s}/deliver',
            path_args = {
                'contractId': contract,
            },
            body = {
                'shipSymbol': to_json(ship),
                'tradeSymbol': to_json(trade_symbol),
                'units': to_json(units),
            },
        )

    # spec_name: negotiate-contract
    def negotiate_contract(self, ship: str | models.ShipLike) -> responses.NegotiateContract:
        """Negotiate a new contract with the HQ.

        In order to negotiate a new contract, an agent must not have
        ongoing or offered contracts over the allowed maximum amount.
        Currently the maximum contracts an agent can have at a time is
        1.

        Once a contract is negotiated, it is added to the list of
        contracts offered to the agent, which the agent can then
        accept.

        The ship must be present at any waypoint with a faction
        present to negotiate a contract with that faction.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.NegotiateContract,
            'post',
            '/my/ships/{shipSymbol:s}/negotiate/contract',
            path_args = {
                'shipSymbol': ship,
            },
        )

    #
    # Factions
    #

    # spec_name: get-factions
    def factions(self) -> Paged[models.Faction]:
        """Return a paginated list of all the factions in the
        game.
        """

        return self._call_paginated(
            models.Faction,
            'get',
            '/factions',
        )

    # spec_name: get-faction
    def faction(self, faction_symbol: str) -> models.Faction:
        """View the details of a faction."""

        return self._call(
            models.Faction,
            'get',
            '/factions/{factionSymbol:s}',
            path_args = {
                'factionSymbol': faction_symbol,
            },
        )

    # spec_name: get-my-factions
    def my_factions(self) -> Paged[responses.MyFaction]:
        """Retrieve factions with which the agent has
        reputation.
        """

        return self._call_paginated(
            responses.MyFaction,
            'get',
            '/my/factions',
        )

    #
    # Fleet
    #

    # spec_name: get-my-ships
    def ships(self) -> Paged[models.Ship]:
        """Return a paginated list of all of ships under your
        agent's ownership.
        """

        return self._call_paginated(
            models.Ship,
            'get',
            '/my/ships',
        )

    # spec_name: purchase-ship
    def purchase_ship(self, ship_type: models.ShipType, waypoint: str | models.WaypointLike) -> responses.PurchaseShip:
        """Purchase a ship from a Shipyard. In order to use this
        function, a ship under your agent's ownership must be in a
        waypoint that has the ``Shipyard`` trait, and the Shipyard
        must sell the type of the desired ship.

        Shipyards typically offer ship types, which are predefined
        templates of ships that have dedicated roles. A template comes
        with a preset of an engine, a reactor, and a frame. It may
        also include a few modules and mounts.
        """

        waypoint = self._resolve(models.Waypoint, waypoint)

        return self._call(
            responses.PurchaseShip,
            'post',
            '/my/ships',
            body = {
                'shipType': to_json(ship_type),
                'waypointSymbol': to_json(waypoint),
            },
        )

    # spec_name: get-my-ship
    def ship(self, ship: str | models.ShipLike) -> models.Ship:
        """Retrieve the details of a ship under your agent's
        ownership.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            models.Ship,
            'get',
            '/my/ships/{shipSymbol:s}',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: create-chart
    def create_chart(self, ship: str | models.ShipLike) -> responses.CreateChart:
        """Command a ship to chart the waypoint at its current
        location.

        Most waypoints in the universe are uncharted by default. These
        waypoints have their traits hidden until they have been
        charted by a ship.

        Charting a waypoint will record your agent as the one who
        created the chart, and all other agents would also be able to
        see the waypoint's traits. Charting a waypoint gives you a one
        time reward of credits based on the rarity of the waypoint's
        traits.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.CreateChart,
            'post',
            '/my/ships/{shipSymbol:s}/chart',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: get-ship-cooldown
    def ship_cooldown(self, ship: str | models.ShipLike) -> models.Cooldown:
        """Retrieve the details of your ship's reactor cooldown.
        Some actions such as activating your jump drive, scanning, or
        extracting resources taxes your reactor and results in a
        cooldown.

        Your ship cannot perform additional actions until your
        cooldown has expired. The duration of your cooldown is
        relative to the power consumption of the related modules or
        mounts for the action taken.

        Response returns a 204 status code (no-content) when the ship
        has no cooldown.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            models.Cooldown,
            'get',
            '/my/ships/{shipSymbol:s}/cooldown',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: dock-ship
    def dock_ship(self, ship: str | models.ShipLike) -> responses.DockShip:
        """Attempt to dock your ship at its current location.
        Docking will only succeed if your ship is capable of docking
        at the time of the request.

        Docked ships can access elements in their current location,
        such as the market or a shipyard, but cannot do actions that
        require the ship to be above surface such as navigating or
        extracting.

        The endpoint is idempotent - successive calls will succeed
        even if the ship is already docked.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.DockShip,
            'post',
            '/my/ships/{shipSymbol:s}/dock',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: extract-resources
    def extract_resources(self, ship: str | models.ShipLike) -> responses.ExtractResources:
        """Extract resources from a waypoint that can be
        extracted, such as asteroid fields, into your ship. Send an
        optional survey as the payload to target specific yields.

        The ship must be in orbit to be able to extract and must have
        mining equipments installed that can extract goods, such as
        the ``Gas Siphon`` mount for gas-based goods or ``Mining
        Laser`` mount for ore-based goods.

        The survey property is now deprecated. See the
        ``extract/survey`` endpoint for more details.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.ExtractResources,
            'post',
            '/my/ships/{shipSymbol:s}/extract',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: extract-resources-with-survey
    def extract_resources_with_survey(self, ship: str | models.ShipLike, survey: models.Survey | None = None) -> responses.ExtractResourcesWithSurvey:
        """Use a survey when extracting resources from a
        waypoint. This endpoint requires a survey as the payload,
        which allows your ship to extract specific yields.

        Send the full survey object as the payload which will be
        validated according to the signature. If the signature is
        invalid, or any properties of the survey are changed, the
        request will fail.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.ExtractResourcesWithSurvey,
            'post',
            '/my/ships/{shipSymbol:s}/extract/survey',
            path_args = {
                'shipSymbol': ship,
            },
            body = to_json(survey),
        )

    # spec_name: jettison
    def jettison(self, ship: str | models.ShipLike, symbol: models.TradeSymbol, units: int) -> responses.Jettison:
        """Jettison cargo from your ship's cargo hold."""

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.Jettison,
            'post',
            '/my/ships/{shipSymbol:s}/jettison',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'symbol': to_json(symbol),
                'units': to_json(units),
            },
        )

    # spec_name: jump-ship
    def jump_ship(self, ship: str | models.ShipLike, waypoint: str | models.WaypointLike) -> responses.JumpShip:
        """Jump your ship instantly to a target connected
        waypoint. The ship must be in orbit to execute a jump.

        A unit of antimatter is purchased and consumed from the market
        when jumping. The price of antimatter is determined by the
        market and is subject to change. A ship can only jump to
        connected waypoints
        """

        ship = self._resolve(models.Ship, ship)
        waypoint = self._resolve(models.Waypoint, waypoint)

        return self._call(
            responses.JumpShip,
            'post',
            '/my/ships/{shipSymbol:s}/jump',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'waypointSymbol': to_json(waypoint),
            },
        )

    # spec_name: create-ship-system-scan
    def create_ship_system_scan(self, ship: str | models.ShipLike) -> responses.CreateShipSystemScan:
        """Scan for nearby systems, retrieving information on
        the systems' distance from the ship and their waypoints.
        Requires a ship to have the ``Sensor Array`` mount installed
        to use.

        The ship will enter a cooldown after using this function,
        during which it cannot execute certain actions.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.CreateShipSystemScan,
            'post',
            '/my/ships/{shipSymbol:s}/scan/systems',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: create-ship-waypoint-scan
    def create_ship_waypoint_scan(self, ship: str | models.ShipLike) -> responses.CreateShipWaypointScan:
        """Scan for nearby waypoints, retrieving detailed
        information on each waypoint in range. Scanning uncharted
        waypoints will allow you to ignore their uncharted state and
        will list the waypoints' traits.

        Requires a ship to have the ``Sensor Array`` mount installed
        to use.

        The ship will enter a cooldown after using this function,
        during which it cannot execute certain actions.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.CreateShipWaypointScan,
            'post',
            '/my/ships/{shipSymbol:s}/scan/waypoints',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: create-ship-ship-scan
    def create_ship_ship_scan(self, ship: str | models.ShipLike) -> responses.CreateShipShipScan:
        """Scan for nearby ships, retrieving information for all
        ships in range.

        Requires a ship to have the ``Sensor Array`` mount installed
        to use.

        The ship will enter a cooldown after using this function,
        during which it cannot execute certain actions.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.CreateShipShipScan,
            'post',
            '/my/ships/{shipSymbol:s}/scan/ships',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: scrap-ship
    def scrap_ship(self, ship: str | models.ShipLike) -> responses.ScrapShip:
        """Scrap a ship, removing it from the game and receiving
        a portion of the ship's value back in credits. The ship must
        be docked in a waypoint that has the ``Shipyard`` trait to be
        scrapped.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.ScrapShip,
            'post',
            '/my/ships/{shipSymbol:s}/scrap',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: get-scrap-ship
    def get_scrap_ship(self, ship: str | models.ShipLike) -> responses.GetScrapShip:
        """Get the value of scrapping a ship. Requires the ship
        to be docked at a waypoint that has the ``Shipyard`` trait.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.GetScrapShip,
            'get',
            '/my/ships/{shipSymbol:s}/scrap',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: navigate-ship
    def navigate_ship(self, ship: str | models.ShipLike, waypoint: str | models.WaypointLike) -> responses.NavigateShip:
        """Navigate to a target destination. The ship must be in
        orbit to use this function. The destination waypoint must be
        within the same system as the ship's current location.
        Navigating will consume the necessary fuel from the ship's
        manifest based on the distance to the target waypoint.

        The returned response will detail the route information
        including the expected time of arrival. Most ship actions are
        unavailable until the ship has arrived at it's destination.

        To travel between systems, see the ship's Warp or Jump
        actions.
        """

        ship = self._resolve(models.Ship, ship)
        waypoint = self._resolve(models.Waypoint, waypoint)

        return self._call(
            responses.NavigateShip,
            'post',
            '/my/ships/{shipSymbol:s}/navigate',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'waypointSymbol': to_json(waypoint),
            },
        )

    # spec_name: warp-ship
    def warp_ship(self, ship: str | models.ShipLike, waypoint: str | models.WaypointLike) -> responses.WarpShip:
        """Warp your ship to a target destination in another
        system. The ship must be in orbit to use this function and
        must have the ``Warp Drive`` module installed. Warping will
        consume the necessary fuel from the ship's manifest.

        The returned response will detail the route information
        including the expected time of arrival. Most ship actions are
        unavailable until the ship has arrived at its destination.
        """

        ship = self._resolve(models.Ship, ship)
        waypoint = self._resolve(models.Waypoint, waypoint)

        return self._call(
            responses.WarpShip,
            'post',
            '/my/ships/{shipSymbol:s}/warp',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'waypointSymbol': to_json(waypoint),
            },
        )

    # spec_name: orbit-ship
    def orbit_ship(self, ship: str | models.ShipLike) -> responses.OrbitShip:
        """Attempt to move your ship into orbit at its current
        location. The request will only succeed if your ship is
        capable of moving into orbit at the time of the request.

        Orbiting ships are able to do actions that require the ship to
        be above surface such as navigating or extracting, but cannot
        access elements in their current waypoint, such as the market
        or a shipyard.

        The endpoint is idempotent - successive calls will succeed
        even if the ship is already in orbit.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.OrbitShip,
            'post',
            '/my/ships/{shipSymbol:s}/orbit',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: purchase-cargo
    def purchase_cargo(self, ship: str | models.ShipLike, symbol: models.TradeSymbol, units: int) -> responses.PurchaseCargo:
        """Purchase cargo from a market.

        The ship must be docked in a waypoint that has ``Marketplace``
        trait, and the market must be selling a good to be able to
        purchase it.

        The maximum amount of units of a good that can be purchased in
        each transaction are denoted by the ``tradeVolume`` value of
        the good, which can be viewed by using the Get Market action.

        Purchased goods are added to the ship's cargo hold.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.PurchaseCargo,
            'post',
            '/my/ships/{shipSymbol:s}/purchase',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'symbol': to_json(symbol),
                'units': to_json(units),
            },
        )

    # spec_name: ship-refine
    def ship_refine(self, ship: str | models.ShipLike, produce: models.Produce) -> responses.ShipRefine:
        """Attempt to refine the raw materials on your ship. The
        request will only succeed if your ship is capable of refining
        at the time of the request. In order to be able to refine, a
        ship must have goods that can be refined and have installed a
        ``Refinery`` module that can refine it.

        When refining, 100 basic goods will be converted into 10
        processed goods.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.ShipRefine,
            'post',
            '/my/ships/{shipSymbol:s}/refine',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'produce': to_json(produce),
            },
        )

    # spec_name: refuel-ship
    def refuel_ship(self, ship: str | models.ShipLike, units: int | None = None, from_cargo: bool | None = None) -> responses.RefuelShip:
        """Refuel your ship by buying fuel from the local
        market.

        Requires the ship to be docked in a waypoint that has the
        ``Marketplace`` trait, and the market must be selling fuel in
        order to refuel.

        Each fuel bought from the market replenishes 100 units in your
        ship's fuel.

        Ships will always be refuel to their frame's maximum fuel
        capacity when using this action.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.RefuelShip,
            'post',
            '/my/ships/{shipSymbol:s}/refuel',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'units': to_json(units),
                'fromCargo': to_json(from_cargo),
            },
        )

    # spec_name: repair-ship
    def repair_ship(self, ship: str | models.ShipLike) -> responses.RepairShip:
        """Repair a ship, restoring the ship to maximum
        condition. The ship must be docked at a waypoint that has the
        ``Shipyard`` trait in order to use this function. To preview
        the cost of repairing the ship, use the Get action.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.RepairShip,
            'post',
            '/my/ships/{shipSymbol:s}/repair',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: get-repair-ship
    def get_repair_ship(self, ship: str | models.ShipLike) -> responses.GetRepairShip:
        """Get the cost of repairing a ship. Requires the ship
        to be docked at a waypoint that has the ``Shipyard`` trait.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.GetRepairShip,
            'get',
            '/my/ships/{shipSymbol:s}/repair',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: sell-cargo
    def sell_cargo(self, ship: str | models.ShipLike, symbol: models.TradeSymbol, units: int) -> responses.SellCargo:
        """Sell cargo in your ship to a market that trades this
        cargo. The ship must be docked in a waypoint that has the
        ``Marketplace`` trait in order to use this function.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.SellCargo,
            'post',
            '/my/ships/{shipSymbol:s}/sell',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'symbol': to_json(symbol),
                'units': to_json(units),
            },
        )

    # spec_name: siphon-resources
    def siphon_resources(self, ship: str | models.ShipLike) -> responses.SiphonResources:
        """Siphon gases or other resources from gas giants.

        The ship must be in orbit to be able to siphon and must have
        siphon mounts and a gas processor installed.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.SiphonResources,
            'post',
            '/my/ships/{shipSymbol:s}/siphon',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: create-survey
    def create_survey(self, ship: str | models.ShipLike) -> responses.CreateSurvey:
        """Create surveys on a waypoint that can be extracted
        such as asteroid fields. A survey focuses on specific types of
        deposits from the extracted location. When ships extract using
        this survey, they are guaranteed to procure a high amount of
        one of the goods in the survey.

        In order to use a survey, send the entire survey details in
        the body of the extract request.

        Each survey may have multiple deposits, and if a symbol shows
        up more than once, that indicates a higher chance of
        extracting that resource.

        Your ship will enter a cooldown after surveying in which it is
        unable to perform certain actions. Surveys will eventually
        expire after a period of time or will be exhausted after being
        extracted several times based on the survey's size. Multiple
        ships can use the same survey for extraction.

        A ship must have the ``Surveyor`` mount installed in order to
        use this function.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.CreateSurvey,
            'post',
            '/my/ships/{shipSymbol:s}/survey',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: transfer-cargo
    def transfer_cargo(self, from_ship: str, trade_symbol: models.TradeSymbol, units: int, to_ship: str) -> responses.TransferCargo:
        """Transfer cargo between ships.

        The receiving ship must be in the same waypoint as the
        transferring ship, and it must able to hold the additional
        cargo after the transfer is complete. Both ships also must be
        in the same state, either both are docked or both are
        orbiting.

        The response body's cargo shows the cargo of the transferring
        ship after the transfer is complete.
        """

        return self._call(
            responses.TransferCargo,
            'post',
            '/my/ships/{shipSymbol:s}/transfer',
            path_args = {
                'shipSymbol': from_ship,
            },
            body = {
                'tradeSymbol': to_json(trade_symbol),
                'units': to_json(units),
                'shipSymbol': to_json(to_ship),
            },
        )

    # spec_name: get-my-ship-cargo
    def ship_cargo(self, ship: str | models.ShipLike) -> models.ShipCargo:
        """Retrieve the cargo of a ship under your agent's
        ownership.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            models.ShipCargo,
            'get',
            '/my/ships/{shipSymbol:s}/cargo',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: get-ship-modules
    def ship_modules(self, ship: str | models.ShipLike) -> list[models.ShipModule]:
        """Get the modules installed on a ship."""

        ship = self._resolve(models.Ship, ship)

        return self._call(
            list[models.ShipModule],
            'get',
            '/my/ships/{shipSymbol:s}/modules',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: install-ship-module
    def install_ship_module(self, ship: str | models.ShipLike, symbol: str) -> responses.InstallShipModule:
        """Install a module on a ship. The module must be in
        your cargo.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.InstallShipModule,
            'post',
            '/my/ships/{shipSymbol:s}/modules/install',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'symbol': to_json(symbol),
            },
        )

    # spec_name: remove-ship-module
    def remove_ship_module(self, ship: str | models.ShipLike, symbol: str) -> responses.RemoveShipModule:
        """Remove a module from a ship. The module will be
        placed in cargo.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.RemoveShipModule,
            'post',
            '/my/ships/{shipSymbol:s}/modules/remove',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'symbol': to_json(symbol),
            },
        )

    # spec_name: get-mounts
    def mounts(self, ship: str | models.ShipLike) -> list[models.ShipMount]:
        """Get the mounts installed on a ship."""

        ship = self._resolve(models.Ship, ship)

        return self._call(
            list[models.ShipMount],
            'get',
            '/my/ships/{shipSymbol:s}/mounts',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: install-mount
    def install_mount(self, ship: str | models.ShipLike, symbol: str) -> responses.InstallMount:
        """Install a mount on a ship.

        In order to install a mount, the ship must be docked and
        located in a waypoint that has a ``Shipyard`` trait. The ship
        also must have the mount to install in its cargo hold.

        An installation fee will be deduced by the Shipyard for
        installing the mount on the ship.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.InstallMount,
            'post',
            '/my/ships/{shipSymbol:s}/mounts/install',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'symbol': to_json(symbol),
            },
        )

    # spec_name: remove-mount
    def remove_mount(self, ship: str | models.ShipLike, symbol: str) -> responses.RemoveMount:
        """Remove a mount from a ship.

        The ship must be docked in a waypoint that has the
        ``Shipyard`` trait, and must have the desired mount that it
        wish to remove installed.

        A removal fee will be deduced from the agent by the Shipyard.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.RemoveMount,
            'post',
            '/my/ships/{shipSymbol:s}/mounts/remove',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'symbol': to_json(symbol),
            },
        )

    # spec_name: get-ship-nav
    def ship_nav(self, ship: str | models.ShipLike) -> models.ShipNav:
        """Get the current nav status of a ship."""

        ship = self._resolve(models.Ship, ship)

        return self._call(
            models.ShipNav,
            'get',
            '/my/ships/{shipSymbol:s}/nav',
            path_args = {
                'shipSymbol': ship,
            },
        )

    # spec_name: patch-ship-nav
    def patch_ship_nav(self, ship: str | models.ShipLike, flight_mode: models.FlightMode | None = None) -> responses.PatchShipNav:
        """Update the nav configuration of a ship.

        Currently only supports configuring the Flight Mode of the
        ship, which affects its speed and fuel consumption.
        """

        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.PatchShipNav,
            'patch',
            '/my/ships/{shipSymbol:s}/nav',
            path_args = {
                'shipSymbol': ship,
            },
            body = {
                'flightMode': to_json(flight_mode),
            },
        )

    #
    # Systems
    #

    # spec_name: get-systems
    def systems(self) -> Paged[models.System]:
        """Return a paginated list of all systems."""

        return self._call_paginated(
            models.System,
            'get',
            '/systems',
        )

    # spec_name: get-system
    def system(self, system: str | models.SystemLike) -> models.System:
        """Get the details of a system. Requires the system to
        have been visited or charted.
        """

        system = self._resolve(models.System, system)

        return self._call(
            models.System,
            'get',
            '/systems/{systemSymbol:s}',
            path_args = {
                'systemSymbol': system,
            },
        )

    # spec_name: get-system-waypoints
    def system_waypoints(self, system: str | models.SystemLike, type: models.WaypointType | None = None, traits: list[models.WaypointTrait] | None = None) -> Paged[models.Waypoint]:
        """Return a paginated list of all of the waypoints for a
        given system.

        If a waypoint is uncharted, it will return the ``Uncharted``
        trait instead of its actual traits.
        """

        system = self._resolve(models.System, system)

        return self._call_paginated(
            models.Waypoint,
            'get',
            '/systems/{systemSymbol:s}/waypoints',
            path_args = {
                'systemSymbol': system,
            },
            query_args = {
                'type': str(type),
                'traits': str(traits),
            },
        )

    # spec_name: get-waypoint
    def waypoint(self, waypoint: str | models.WaypointLike) -> models.Waypoint:
        """View the details of a waypoint.

        If the waypoint is uncharted, it will return the 'Uncharted'
        trait instead of its actual traits.
        """

        system = self._waypoint_to_system(waypoint)
        waypoint = self._resolve(models.Waypoint, waypoint)

        return self._call(
            models.Waypoint,
            'get',
            '/systems/{systemSymbol:s}/waypoints/{waypointSymbol:s}',
            path_args = {
                'systemSymbol': system,
                'waypointSymbol': waypoint,
            },
        )

    # spec_name: get-construction
    def construction(self, waypoint: str | models.WaypointLike) -> models.Construction:
        """Get construction details for a waypoint. Requires a
        waypoint with a property of ``isUnderConstruction`` to be
        true.
        """

        system = self._waypoint_to_system(waypoint)
        waypoint = self._resolve(models.Waypoint, waypoint)

        return self._call(
            models.Construction,
            'get',
            '/systems/{systemSymbol:s}/waypoints/{waypointSymbol:s}/construction',
            path_args = {
                'systemSymbol': system,
                'waypointSymbol': waypoint,
            },
        )

    # spec_name: supply-construction
    def supply_construction(self, waypoint: str | models.WaypointLike, ship: str | models.ShipLike, trade_symbol: models.TradeSymbol, units: int) -> responses.SupplyConstruction:
        """Supply a construction site with the specified good.
        Requires a waypoint with a property of ``isUnderConstruction``
        to be true.

        The good must be in your ship's cargo. The good will be
        removed from your ship's cargo and added to the construction
        site's materials.
        """

        system = self._waypoint_to_system(waypoint)
        waypoint = self._resolve(models.Waypoint, waypoint)
        ship = self._resolve(models.Ship, ship)

        return self._call(
            responses.SupplyConstruction,
            'post',
            '/systems/{systemSymbol:s}/waypoints/{waypointSymbol:s}/construction/supply',
            path_args = {
                'systemSymbol': system,
                'waypointSymbol': waypoint,
            },
            body = {
                'shipSymbol': to_json(ship),
                'tradeSymbol': to_json(trade_symbol),
                'units': to_json(units),
            },
        )

    # spec_name: get-market
    def market(self, waypoint: str | models.WaypointLike) -> models.Market:
        """Retrieve imports, exports and exchange data from a
        marketplace. Requires a waypoint that has the ``Marketplace``
        trait to use.

        Send a ship to the waypoint to access trade good prices and
        recent transactions. Refer to the `Market Overview page
        <https://docs.spacetraders.io/game-concepts/markets>`_ to gain
        better a understanding of the market in the game.
        """

        system = self._waypoint_to_system(waypoint)
        waypoint = self._resolve(models.Waypoint, waypoint)

        return self._call(
            models.Market,
            'get',
            '/systems/{systemSymbol:s}/waypoints/{waypointSymbol:s}/market',
            path_args = {
                'systemSymbol': system,
                'waypointSymbol': waypoint,
            },
        )

    # spec_name: get-jump-gate
    def jump_gate(self, waypoint: str | models.WaypointLike) -> models.JumpGate:
        """Get jump gate details for a waypoint. Requires a
        waypoint of type ``JUMP_GATE`` to use.

        Waypoints connected to this jump gate can be found by querying
        the waypoints in the system.
        """

        system = self._waypoint_to_system(waypoint)
        waypoint = self._resolve(models.Waypoint, waypoint)

        return self._call(
            models.JumpGate,
            'get',
            '/systems/{systemSymbol:s}/waypoints/{waypointSymbol:s}/jump-gate',
            path_args = {
                'systemSymbol': system,
                'waypointSymbol': waypoint,
            },
        )

    # spec_name: get-shipyard
    def shipyard(self, waypoint: str | models.WaypointLike) -> models.Shipyard:
        """Get the shipyard for a waypoint. Requires a waypoint
        that has the ``Shipyard`` trait to use. Send a ship to the
        waypoint to access data on ships that are currently available
        for purchase and recent transactions.
        """

        system = self._waypoint_to_system(waypoint)
        waypoint = self._resolve(models.Waypoint, waypoint)

        return self._call(
            models.Shipyard,
            'get',
            '/systems/{systemSymbol:s}/waypoints/{waypointSymbol:s}/shipyard',
            path_args = {
                'systemSymbol': system,
                'waypointSymbol': waypoint,
            },
        )

    #
    # Global
    #

    # spec_name: get-status
    def status(self) -> responses.ServerStatus:
        """Return the status of the game server.
        This also includes a few global elements, such as
        announcements, server reset dates and leaderboards.
        """

        return self._call(
            responses.ServerStatus,
            'get',
            '/',
            adhoc = True,
        )

    # spec_name: get-error-codes
    def error_codes(self) -> responses.ErrorCodes:
        """Return a list of all possible error codes thrown by
        the game server.
        """

        return self._call(
            responses.ErrorCodes,
            'get',
            '/error-codes',
            adhoc = True,
        )
